<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k4keye의 주니어 개발 일지</title>
    <description>주니어 개발자의 좌충우돌 생존 일기</description>
    <link>https://k4keye.github.io/jekyll-theme-yat/</link>
    <atom:link href="https://k4keye.github.io/jekyll-theme-yat/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Jun 2021 08:40:08 +0000</pubDate>
    <lastBuildDate>Tue, 29 Jun 2021 08:40:08 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>블록체인 - 이중 지불 문제 와 해결</title>
        <description>&lt;h2 id=&quot;이중-지불&quot;&gt;이중 지불&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;이중 지불이란&lt;br /&gt;
하나의 자산이 한 번만 결제가 되는 것이 아니라 두 번 결제되는 상황을 말한다.&lt;br /&gt;
&lt;br /&gt;
즉 내가 계좌에 만 원이 있다면 핸드폰으로는 친구 A에게 만 원을 입금할 준비를 하고&lt;br /&gt;
컴퓨터로 친구 B에게 만 원을 입금할 준비를 한 후 동시에 입금을 하게 되면 어떻게 될까&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/DoublePayment/1.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;중앙-관리-시스템의-이중-지불&quot;&gt;&lt;strong&gt;중앙 관리 시스템의 이중 지불&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;중앙 관리 시스템인 기존의 금융 시스템은 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/DoublePayment/2.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;일을 동시에 처리하는 것이 아닌 거래 요청이 들어온 순서대로  &lt;br /&gt;
먼저 온 요청을 처리하고 뒤에 온 요청을 처리하기 때문에&lt;br /&gt;
이중 지불 문제를 해결할 수 있다.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;블록체인의-이중-지불&quot;&gt;&lt;strong&gt;블록체인의 이중 지불&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;블록체인에서의 이중 지불을 알아보자&lt;br /&gt;
&lt;br /&gt;
블록체인에서 나의 지갑에서 다른 곳으로 코인을 보낸다고 하는 것은&lt;br /&gt;
UTXO를 소모한다는 것이다.&lt;br /&gt;
&lt;br /&gt;
이중 지불이라는 것은 결국 하나의 UTXO를 2번 사용한다는 것인데&lt;br /&gt;
&lt;br /&gt;
블록체인에서는 거래를 한다고 해서 바로 거래가 완료되는 것이 아니다.&lt;br /&gt;
즉 이 거래내역이 바로 체인 위에 올라가는 것이 아닌&lt;br /&gt;
유효한 블록만이 체인 위로 올라가기 때문에&lt;br /&gt;
&lt;br /&gt;
채굴 자라고 불리는 마이너는 대기 중인 거래 정보(트랜잭션 정보)를 블록에 넣고&lt;br /&gt;
체인 위에 올리게 되는데 이때 동일한 UTXO를 사용한 복수의 거래 정보는 하나의 블록에 담을 수 없게 된다.&lt;br /&gt;
&lt;br /&gt;
체인 위에 올라가야만 이 거래가 유효한 것으로 간주가 되고&lt;br /&gt;
이제 이 UTXO는 존재하지 않기 때문에 이를 다시 사용할 수가 없게 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/DoublePayment/3.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/24/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8_%EC%9D%B4%EC%A4%91%EC%A7%80%EB%B6%88.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/24/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8_%EC%9D%B4%EC%A4%91%EC%A7%80%EB%B6%88.html</guid>
        
        
        <category>BlcokChain</category>
        
      </item>
    
      <item>
        <title>UTXO에 대해 알아보자.</title>
        <description>&lt;h2 id=&quot;utxo-unspent-transaction-output&quot;&gt;UTXO (Unspent Transaction Output)&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;UTXO는 사용되지 않은 트랜잭션을 의미한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션을 남은 잔액이라고 생각해서 이해하면 쉽게 접근할 수 있다.&lt;br /&gt;
UTXO는 보유하고 있는 잔액의 단위의 개수라고 볼 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/1.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;예로 내가 만 원짜리 한 장과  천 원짜리 한 장이 있다고 했을 때&lt;br /&gt;
금액은 11000원이겠지만 &lt;br /&gt;
여기서의 UTXO는 2가 된다.&lt;br /&gt;
&lt;br /&gt;
나의 잔액 단위 개수는 2개이며&lt;br /&gt;
각 단위들은 사로 다른 잔액을 가리키고 있다. &lt;br /&gt;
하나는 만 원, 하나는 천원&lt;br /&gt;
&lt;br /&gt;
만약 만원 한 장, 천원 두 장이라고 본다면&lt;br /&gt;
UTXO는 3개가 된다.&lt;br /&gt;
&lt;br /&gt;
블록체인 위에서의 UTXO 도 위와 같이 이해할 수 있다.&lt;br /&gt;
&lt;br /&gt;
UTXO는 남은 잔액을 알려주는 것이 아닌 남은 잔액의 수를 알려주는 것으로&lt;br /&gt;
각각의 UTXO는 각각 다른 개수의 비트코인을 가리키고 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/2.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 거래를 한번 봐보자.&lt;/p&gt;

&lt;p&gt;다른 사람에게 나의 코인을 보내려 한다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/3.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;위와 같이 0.1 코인을 보내려고 하면&lt;br /&gt;
0.1 코인에 해당하는 UTXO를 소모하여 전달하게 된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;주는 게 아니다. 소모하는 것이다.&lt;br /&gt;
UTXO는 지갑으로 코인을 받게 되면 그때 그에 해당하는 UTXO 가 생성이 되는데&lt;br /&gt;
해당 UTXO를 다른 지갑으로 전달하려고 하면 해당 UTXO는 소멸이 되고&lt;br /&gt;
전달받은 다른 지갑에 새로운 UTXO가 생성되는 것이다.&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;그러면 딱 맞는 코인의 개수에 부합하는 UTXO가 없으면 어떻게 할까.&lt;br /&gt;
우리가 물건을 살 때 딱 맞는 금액이 아닌 경우 그거보다 높은 금액을 주고 거스름돈을 받게 된다. &lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/4.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;위와 같은 경우 정확히 2개를 가리키고 있는 UTXO는 없다.&lt;br /&gt;
따라서 2개 이상을 가리키는 UTXO를 찾게 되는데&lt;br /&gt;
맨 위에 있는 3개짜리 UTXO라는 것을 알 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;​&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 중요한 점이 있다면 거스름돈이다.&lt;br /&gt;
보통 마트에서 거래를 한다면 위와 같은 상황에서 &lt;br /&gt;
나에게 3의 UTXO를 받은 사람은 자연스럽게 1의 UTXO를 돌려주겠지만&lt;br /&gt;
블록체인 위에서는 다르다. 내가 돌려받아야 할 금액도 내가 정해야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/5.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;
중요한 포인트는&lt;br /&gt; 
보내야 할 코인보다 많은 UTXO를 사용할 때  그 안의 일부만을 보내는 게 아니라는 것과&lt;br /&gt; 
돌려받아야 할 코인도 지정해야 한다는 것이다.&lt;br /&gt; 
&lt;/span&gt;
​&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;이와 같이 나의 UTXO를 소모하고 새로운 UTXO를 받게 된다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/UTXO/6.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UTXO는 지갑에 코인을 받게 되면 생성된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UTXO는 정해진 코인 단위가 있는 것이 아닌 나에게 온 코인에 대한 거래 정보라고 볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;나의 코인을 다른 곳으로 전달하려면 UTXO는 사용해게 되고  UTXO는 소멸한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/23/UTXO%EC%97%90%EB%8C%80%ED%95%B4%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/23/UTXO%EC%97%90%EB%8C%80%ED%95%B4%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90.html</guid>
        
        
        <category>BlcokChain</category>
        
      </item>
    
      <item>
        <title>비잔틴 장군의 딜레마와 블록체인</title>
        <description>&lt;h2 id=&quot;분산화-컴퓨팅의-난제&quot;&gt;분산화 컴퓨팅의 난제&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;분산화 컴퓨팅은 여러 컴퓨터를 활용하여 큰 연산을 수행하는 것으로&lt;br /&gt;
적은 힘을 많이 들여 큰 힘으로 만드는 시스템이다.&lt;br /&gt;
여러 컴퓨터의 협력으로 하나의 결과를 만든다면&lt;br /&gt;
&lt;br /&gt;
여기서 신뢰성이 얼마나 중요한지 알 수 있다.&lt;br /&gt;
만약 중간에 컴퓨터가 거짓 행위을 한다면 결국 잘못된 결과로 이끌어낼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;어떻게 하면 서로 떨어져 있는 여러 독립제들이 어떤 행동을 하기 전에 서로 의견이 일치하다는 것을 알 수 있을까?&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
이러한 문제를 비잔틴 장군의 딜레마 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;비잔틴-장군의-딜레마&quot;&gt;비잔틴 장군의 딜레마&lt;/h2&gt;
&lt;hr /&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/Dilemma.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
비잔틴 장군의 딜레마에서는&lt;br /&gt;
&lt;br /&gt;
떨어져 있는 각 장군 중 일정 장군 이상이 합동하여 같은 시간에 다 같이 적의 성을 공격해야 이길 수 있는 상황에서&lt;br /&gt;
&lt;br /&gt;
각 장군은 자신 근처에 장군에게 연락하는 식으로 전달하여 결과적으로 모든 장군에게&lt;br /&gt;
계획을 전달해야 하는 상황인데&lt;br /&gt;
&lt;br /&gt;
장군들 중에는 배신자가 존재하고 이 배신자는 계획의 시간을 변경하여 전달한다면&lt;br /&gt;
어떻게 배신자와 같은 여려 문제 속에서&lt;br /&gt;
계획에 맞춰 함께 성을 향해 공격할 것이라는 절대적인 확신을 가질 수 있을까라는 문제이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;작업-증명proof-of-work&quot;&gt;작업 증명(Proof-of-work)&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;작업 증명은 최초의 합의 알고리즘이며 &lt;br /&gt;
바지는 틴 장군의 딜레마로 보면 어떻게 각 장군들이 합의하는지에 대한 해답이다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;작업 증명은 블록체인의 보안을 유지하기 위해 해시값을 구하는 과정을 의미한다.&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
모든 블록체인은 블록 생성 주기라는 것을 가지고 있다.&lt;br /&gt;
(비트코인의 경우 10분 이더리움은 15초)&lt;br /&gt;
&lt;br /&gt;
블록체인은 기본적으로 열려있어 관리자가 존재하지 않는다.&lt;br /&gt;
따라서 시스템을 망치려는 의도를 가진 자가 네트워크에 참여하여도&lt;br /&gt;
네트워크는 정상적으로 작동해야 한다.&lt;br /&gt;
​&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 블록을 생성한다는 것은 규칙에 따라 생성해야 하며&lt;br /&gt;
예로 비트코인의 경우 10분의 연사력을 사용해야 한다&lt;br /&gt;
그리고 이를 증명했을 때 인정받는 구조이다.&lt;br /&gt;
&lt;br /&gt;
​
즉 자신이 10분간 열심히 일했다는 것을 증명하기 위해 특정 난이도를 가진 해시값을 찾아야 한다.&lt;br /&gt;
여기서 10분은 동적인 시간으로 평균 10분을 의미한다.&lt;br /&gt;
즉 연사력을 이용하여 해시값을 구하는 과정이 10분보다 짧으면 난이도를 증가시키고&lt;br /&gt;
10분보다 길면 난이도를 감소시킨다.&lt;br /&gt;
&lt;br /&gt;
이 해시값은 
&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/Header.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;블록 헤더에 들어가 있는&lt;br /&gt;
총 80bytes의 데이터를 SAH256 함수에 넣는 것으로 난이도에 해당하는 해시값을 구하게 된다.&lt;br /&gt;
하지만 Nonce가 문제이다. 나머지 정보는 누구라도 쉽게 얻을 수 있는 데이터이기 때문에 상관없지만
Nonce는 정해져 있지 않으니&lt;br /&gt;
&lt;br /&gt;
​게속된 시도를 통해 결과적으로 원하는 난이도의 해시값이 나온다면 이제 체인에 올라갈 수 있는 유효한 블록이 되는 것이다.&lt;br /&gt;
&lt;br /&gt;
내가 찾은 Nonce는 나만 알고 있지만&lt;br /&gt;
블록체인이라는 시스템은 나만 만들어가는 시스템이 아니다.&lt;br /&gt;
&lt;br /&gt;
내가 유효한 블록을 만들었다면 &lt;br /&gt;
이를 이웃 노드들에게 전달하는 것이다.&lt;br /&gt;
&lt;br /&gt;
그러면 전 세계 노드들이 내가 새로운 블록을 만들었다는 것 알게 되고 &lt;br /&gt;
이제서야 내 블록이 인정받게 되는 것이다.&lt;br /&gt;
&lt;br /&gt;
만약 전달하지 않으면 내 블록은 체인 위에 올라가지도 않고 내가 이미 Nonce를 찾은 것도 모르고 계속 이웃 노드들은 이 Nonce를 찾고 있을 것이다.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
그렇다면 비잔틴 장군의 딜레마에서 나온 배신자처럼&lt;br /&gt;
누군가가 틀린 Nonce를 넣고 이것을 체인 위에 올리게 된다면 어떻게 될까.&lt;br /&gt;
&lt;br /&gt;
가짜 Nonce를 만들어 가짜 블록을 만들고&lt;br /&gt;
이 가짜 블록을 이웃 노드들에게 전달한다면&lt;br /&gt;
가짜 블록을 전달받은 이웃 노드들은 &lt;br /&gt;
내가 혹시 거짓말하는 것은 아닌지 나의 Nonce를 가지고 해시값을 도출해본다.&lt;br /&gt;
그리고 원하는 해시값이 아닌 경우 이를 거절하는 것이다.&lt;br /&gt;
​&lt;br /&gt;
&lt;br /&gt;
이것으로&lt;br /&gt;
Nonce를 찾는 건 굉장히 힘든 일이지만&lt;br /&gt;
Nonce가 정확한가를 확인하는 건 간단한 일이라는 걸 알 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
출처 &lt;br /&gt;
이미지 : https://medium.com/@DebrajG/how-the-byzantine-general-sacked-the-castle-a-look-into-blockchain-370fe637502c&lt;br /&gt;
이미지 : https://bitcoin.stackexchange.com/questions/87631/block-header-encoding-serialization&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/11/%EB%B9%84%EC%9E%94%ED%8B%B4-%EC%9E%A5%EA%B5%B0%EC%9D%98-%EB%94%9C%EB%A0%88%EB%A7%88.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/blcokchain/2021/06/11/%EB%B9%84%EC%9E%94%ED%8B%B4-%EC%9E%A5%EA%B5%B0%EC%9D%98-%EB%94%9C%EB%A0%88%EB%A7%88.html</guid>
        
        
        <category>BlcokChain</category>
        
      </item>
    
      <item>
        <title>FIDO에 대해 알아보자.</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;인터넷 뱅킹 한 번 하자고 2~3개 이상의 패스워드를 별도로 입력해야 한다면,&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;차라리  은행에 직접 가서 일을 보는 것이 더 수월할 수도 있다.&lt;/strong&gt;&lt;br /&gt;
(시큐업 세미나(https://it.donga.com/22651/))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;fido-언라이언스&quot;&gt;&lt;strong&gt;FIDO 언라이언스&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;FIDO 언라이언스 는 보안 목적으로 사용되는 비밀번호의 사용을 줄이는데 목표를 가진 협회로&lt;br /&gt;
안정성이 있는 인증 방식인 FIDO 기술표준을 지정하였다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fido&quot;&gt;FIDO&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;fidofast-identity-online&quot;&gt;&lt;strong&gt;FIDO(Fast Identity Online)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;FIDO는 온라인상의 빠르고 안전한 인증을 의미한다.&lt;br /&gt;
기존에 사용하는 기본적인 인증방법인 ID, Password를 생각해 보면 &lt;br /&gt;
문제점이 여러 가지가 존재한다.&lt;br /&gt;
먼저 접속하려는 서비스의 비밀번호를 알고 있어야 한다는 점, 약한 비밀번호, 반복적인 비밀번호 등이 존재한다.&lt;br /&gt;
&lt;br /&gt;
FIDO는 기존에 사용하는 ID, Password 방식이 아닌 생체인 증인 지문, 홍채, 얼굴, 정맥 등 을 이용한 인증 방식이다.&lt;br /&gt;
또한 가장 큰 특징으로 인증 정보를 서버가 아닌 클라이언트의 보안 영역에 저장을 하게 된다.&lt;br /&gt;
따라서 서버가 해킹을 당해도 개인 정보가 유출되지 않는다.&lt;br /&gt;
또한 단말기를 탈취당해도 악용하기 어렵다.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;등록-인증&quot;&gt;&lt;strong&gt;등록, 인증&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;FIDO 프로토콜에는 등록(Registration) 과 인증(Authentication)의 흐름이 존재한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 등록을 통해 인증을 위한 키 쌍을 생성하고 생성된 키를 사용할 수 있도록 FIDO 서버에 등록하게 된다.&lt;br /&gt;
등록에 완료되면 사용자는 등록된 공개키로 인증을 수행할 수 있다.&lt;br /&gt;
&lt;br /&gt;
인증은 사전에 등록된 키(공개키)를 활용하여 사용자를 인증하는 절차이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uafuniversal-authentication-framework&quot;&gt;&lt;strong&gt;UAF(Universal Authentication Framework)&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/FIDO/UAF.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;UAF는 ID, Password 방식 대신 생체 인증을 통해 개인의 인증 과정을 처리하는 것으로
기기에 생체정보를 등록 후 인증을 통해 FIDO 서버에 접속할 수 있게 되는 구조이다.&lt;br /&gt;
&lt;br /&gt;
UAF는 스마트폰이나 태플릿 같은 모바일 기기 사용자의 인증에 초점이 맞춰져있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;u2funiversal-second-factor&quot;&gt;&lt;strong&gt;U2F(Universal Second Factor)&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/BlockChain/FIDO/U2F.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;ID, Password 방식으로 1차 인증 후 1회용 보안 키가 저장된 동글을 USB 포트에 연결하여 2차 인증을 하는 방식이다.&lt;br /&gt;
또한 강력한 2차 인증으로 인해 그전의 Password의 문제였던&lt;br /&gt;
복잡한 Password가 아닌 4자리 PIN 넘버로 단순하게 1차 인증을 할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fido2&quot;&gt;FIDO2&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;FDO1 은 비밀번호의 문제점과 기존의 생체 인식 기술의 단점을 극복하기 위해 나왔다면&lt;br /&gt;
FIDO2는 UAF, U2F를 통합하여 web 환경에서도 사용할 수 있도록 한 것이다.&lt;br /&gt;
&lt;br /&gt;
FIDO1 과 FIDO2는 FIDO 서버를 사용하고 프로토콜 을을 통해 통신한다는 점을 빼면&lt;br /&gt;
완전히 다른 기술이라 볼 수 있다.&lt;br /&gt;
&lt;br /&gt;
FIDO1 은 FIDO 클라이언트가 존재하고 FIDO 인증장치를 연동하여 인증을 하였다면&lt;br /&gt;
FIDO2는 별도의 클라이언트 없이 웹 브라우저에서 FIDO 인증 장치를 연동해 인증을 할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;webauthnweb-authentication&quot;&gt;&lt;strong&gt;WebAuthn(Web Authentication)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;WebAuthn 은 온라인 서비스에서 FIDO 인증을 사용할 수 있도록 &lt;br /&gt;
브라우저 및 관련 웹 플랫폼에 내장할 수 있는 표준 웹 API이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ctapclient-to-authenticator-protocol&quot;&gt;&lt;strong&gt;CTAP(Client to Authenticator Protocol)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;CTAP는 모바일 단말기나 FIDO 보안기와 같은 외부 장치가 PC 응용프로그램 및 웹 서비스에 대한 인증을 연동할 수 있도록 하는 프로토콜이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;즉-fido2는-단말기-자체에서-인증이-가능했던-uaf-2차-인증을-하는-u2f-다른-단말기에서도-생체-인증을-할-수-있게-하는-ctap-기술이-webauthn-웹-표준-api를-통해-온라인-서비스에서-이용할-수-있도록-하는-것이다&quot;&gt;즉 FIDO2는 단말기 자체에서 인증이 가능했던 UAF, 2차 인증을 하는 U2F, 다른 단말기에서도 생체 인증을 할 수 있게 하는 CTAP 기술이 WebAuthn 웹 표준 API를 통해 온라인 서비스에서 이용할 수 있도록 하는 것이다.&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
출처 &lt;br /&gt;
https://fidoalliance.org/specifications-2/?lang=ko&lt;br /&gt;
https://www.itworld.co.kr/news/181859&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/blockchain/2021/06/02/FIDO%EC%97%90%EB%8C%80%ED%95%B4%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/blockchain/2021/06/02/FIDO%EC%97%90%EB%8C%80%ED%95%B4%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90.html</guid>
        
        
        <category>BlockChain</category>
        
      </item>
    
      <item>
        <title>ViewBinding으로 FindViewByid 랑 작별하기</title>
        <description>&lt;h2 id=&quot;1-서론&quot;&gt;1 서론&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;11-findviewbyid&quot;&gt;&lt;strong&gt;1.1 FindViewByid&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
안드로이드에서 Layout에 존재하는 컴포넌트를 객체로 사용하려면&lt;br /&gt;
FindViewByid를 통하여 작업을 했어야 했다.&lt;br /&gt;
&lt;br /&gt;
만약 접근하려는 컴포넌트가 5개, 10개만 넘어도&lt;br /&gt;
class 파일에는 FindViewByid 가 많이 붙게 되는 걸 볼 수 있다.&lt;br /&gt;
또한 개발자의 실수로 인해 잘못된 컴포넌트를 참조하려 하면 null이 발생하는 문제가 있다.&lt;br /&gt;
&lt;br /&gt;
예전에 Kotlin에서는 kotilin-android-extensions 을 통해 FindViewByid 없이도 컴포넌트에 접근하여 사용할 수 있는 게 큰 매력으로 다가왔지만 &lt;br /&gt;
이제는 여러 문제점으로 인해 kotilin-android-extensions를 기본으로 제공하지 않는다.&lt;br /&gt;
따라서 이제는 ViewBinding를 사용하도록 권장하고 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-viewbinding&quot;&gt;&lt;strong&gt;1.2 ViewBinding&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
build.gradle에 viewBinding 속성을 활성화시키는 것으로 사용할 수 있으며&lt;br /&gt;
해당 모듈에 있는 layout 파일에 대한 binding class 가 자동으로 생성된다.&lt;br /&gt;
&lt;br /&gt;
이렇게 생성된  binding class를 통해 해당 layout에 있는 모든 컴포넌트에 참조가 가능해진다.&lt;br /&gt;
즉 FindViewByid를 대체할 수 있게 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-viewbinding-사용하기&quot;&gt;2 ViewBinding 사용하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-viewbinding-활성화&quot;&gt;&lt;strong&gt;2.1 ViewBinding 활성화&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buildFeatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewBinding&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 설정하는 것으로 Layout 파일에 대한 binding class 파일이 자동으로 생성되며&lt;br /&gt;
카멜 표기법으로 변환되고 이름 끝에 binding를 붙인 이름으로 생성된다.&lt;br /&gt;
&lt;br /&gt;
activity_main.xml -&amp;gt; ActivityMainBinding로 생성된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-layout에-컴포넌트-배치&quot;&gt;&lt;strong&gt;2.2 Layout에 컴포넌트 배치&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tools:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/tv&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;15sp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/btn&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;버튼1&quot;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;간단하게 TextView, Button 을 하나씩 배치하였다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-activity-class-파일-수정&quot;&gt;&lt;strong&gt;2.3 Activity Class 파일 수정&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 만들어진 Class는 위와 같은 모양을 하고 있다.&lt;br /&gt;
이제 이곳에 ViewBinding를 연결하면 된다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기존에 setContentView로 연결되어 있는 Layout이  아닌&lt;br /&gt;
Binding Class의 인스턴스를 얻기 위해 inflate()를 사용하여 &lt;br /&gt;
rootView를 매개변수로 넣어주는 것으로 View를 참조할 수 있게 된다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-컴포넌트-접근&quot;&gt;&lt;strong&gt;2.4 컴포넌트 접근&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMainBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutInflater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;클릭&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/topic/libraries/view-binding&quot;&gt;ViewBinding Android Developers &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/06/01/Android_ViewBinding.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/06/01/Android_ViewBinding.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android Coroutine 사용하기</title>
        <description>&lt;h2 id=&quot;1-coroutine&quot;&gt;1. Coroutine&lt;/h2&gt;

&lt;p&gt;Coroutine은 &lt;br /&gt;
Co(협력) + Routine(규칙적인 작업)의 합성어로&lt;br /&gt;
하나의 작업이 끝날 때까지 계속 진행되는 것이 아니라&lt;br /&gt;
실행 중간에 다른 작업을 하러 갔다가 다시 돌아와서 작업을 이어서 진행할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-coroutine-은-thread-가-아니다&quot;&gt;&lt;strong&gt;1.1. Coroutine 은 Thread 가 아니다.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;같은 백그라운드 작업을 하는 점에서 비슷하지만 &lt;br /&gt;
Coroutine은 하나의 작업이라면&lt;br /&gt;
Thread는 그 작업을 수행하는 공간이다.&lt;br /&gt;
&lt;br /&gt;
즉 하나의 Thread에서 여러 Coroutine 을 동시에 실행할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-의존성-추가&quot;&gt;&lt;strong&gt;1.2. 의존성 추가&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;13-scope&quot;&gt;&lt;strong&gt;1.3. Scope&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;코루틴은 실행 범위, 제어 범위를 지정할 수 있으며 이 범위를 Coroutine Scpoe 라고 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GlobalScpoe&lt;/strong&gt; : 프로그램 어디서나 제어, 동작이 가능한 범위&lt;br /&gt;
&lt;strong&gt;CoroutineScpoe&lt;/strong&gt; :특정한 목적을 지정하여 제어 및 동작이 가능한 범위&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;IO : 네트워크 작업이나 DB에 접근하는 등 백그라운드에서 필요한 작업을 수행&lt;br /&gt;
Main: 메인스레드 작업으로 UI 갱신이나, Toast 등 View 관련 작업 수행&lt;br /&gt;
Default : 무거운 연산 작업 수행&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-launch-와-async&quot;&gt;2. launch 와 async&lt;/h2&gt;
&lt;p&gt;코루틴 반환의 여부에 따라 사용된다&lt;/p&gt;

&lt;h3 id=&quot;21-launch&quot;&gt;2.1. &lt;strong&gt;launch&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;launch는 반환이 없는 job 객체를 반환한다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 코루틴의 결과를 대기하려면 join 을사용한다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-async&quot;&gt;2.2. &lt;strong&gt;async&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;async는 반환값이 있는 Deffered 객체를 반환한다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;async 종료&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 코루틴의 결과를 대기하려면 await 을사용한다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;async 종료&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-runblocking&quot;&gt;2.3. &lt;strong&gt;runBlocking&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GlobalScope&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 코드를 작성 한 경우 화면에는 출력이 되지 않는다.&lt;br /&gt;
그 이유는 코루틴은 스코프 혹은 프로그램이 종료가 되면 같이 종료가 되기 때문에&lt;br /&gt;
main 이 종료가 되면서 같이 종료가 된 것이다.&lt;br /&gt;
&lt;br /&gt;
코루틴이 종료될 때까지 메인루틴을 대기하면 화면에 출력된다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;runBlocking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이경우 안드로이드에서 메인스레드 를 오랫동안 대기하면 ANR이 발생하니 주의를 해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;3-여러-dispatchers-의-처리&quot;&gt;3. 여러 Dispatchers 의 처리&lt;/h2&gt;

&lt;h3 id=&quot;31-비동기-메서드-생성&quot;&gt;3.1. &lt;strong&gt;비동기 메서드 생성&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;함수 앞에 붙은 suspend는 이 함수가 비동기, 즉 코루틴 안에서 실행하도록 하는 것이다.&lt;br /&gt;
만약 코루틴이 아닌 곳에서 사용하려 하면 경고를 출력한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-여러-dispatchers&quot;&gt;3.2. &lt;strong&gt;여러 Dispatchers&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 백그라운드 작업과 UI 작업이 동시에 일어날 때&lt;br /&gt;
두 종류의 작업을 처리해야 하는 경우가 생긴다.&lt;br /&gt;
&lt;br /&gt;
물론&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 코루틴 안에 또 코루틴을 생성하여 처리할 수 있지만&lt;br /&gt;
이럴 때 사용하는 withContext가 있다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;withContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;4-네트워크-타임아웃-처리&quot;&gt;4. 네트워크 타임아웃 처리&lt;/h3&gt;

&lt;p&gt;네트워크 타임아웃 처리는 withTimeoutOrNull로 쉽게 처리할 수 있다.&lt;br /&gt;
시간이 경과하면 null 을 반환한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;CoroutineScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;callApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;withContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dispatchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/05/02/Corutine.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/05/02/Corutine.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android inflation 란</title>
        <description>&lt;h2 id=&quot;1-inflation&quot;&gt;1 Inflation&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;11-서론&quot;&gt;&lt;strong&gt;1.1 서론&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Android 에서의 inflation 을 알아보려한다.&lt;br /&gt;
&lt;br /&gt;
inflation은 xml 레이아웃 파일로 정의한 정보를 런타임 중에 메모리 상에 객체로 만들어주어 화면에 보여주는 과정을 의미한다.&lt;br /&gt;
즉 Android 개발을 하면서 View를 만들기 위해 작업하였던 xml을 실제로 사용할 수 있게 해주는 작업이라고 할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;12-inflation-사이클&quot;&gt;&lt;strong&gt;1.2 Inflation 사이클&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/android/inflation.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;이미지를 보고 간단하게 확인하면 xml 을 정의하고 실행 시 메모리로 xml을 로딩하여 화면에 보여주는 순서이다.&lt;br /&gt;
이 일련의 작업은 xml 레이아웃 파일을 실제로 사용할 수 있도 록에서 view ID 를 설정하고 해당 ID가 R 파일에 주소값으로 적용되어&lt;br /&gt;
findViewById 메서드 와 Id를 활용하여 코드상으로 View 객체를 가져와 제어할 수 있게 하는 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-inflation-종류&quot;&gt;&lt;strong&gt;1.3 Inflation 종류&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Inflation에는 두 가지 방식이 있다.&lt;/p&gt;

&lt;h4 id=&quot;131-전체화면&quot;&gt;&lt;strong&gt;1.3.1 전체화면&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;흔히 xml과 매핑되는 Class 파일에는 자동적으로 setContentView 가 적용되어 있는 모습을 볼 수 있다.&lt;br /&gt;
이것이 Inflation 이다.&lt;br /&gt;
setContentView 는 전체 화면에 뷰를 지정할 때 사용된다.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;132-일부화면&quot;&gt;&lt;strong&gt;1.3.2 일부화면&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;LayoutInflater 를 사용하여 작업하는 경우 전체 화면이 아닌 일부를 차지하는 요소들을 화면에 보여줄 때 사용된다.&lt;br /&gt;
물론 이 또한 Inflation 이다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;14-결론&quot;&gt;&lt;strong&gt;1.4 결론&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;결국 View를 그리기 위해 작성한 xml은 Inflation을 통해 제어를 할 수 있던 것이었다.&lt;br /&gt;
그래서 Inflation 하기 전에 해당 View에 리소스에 접근하게 되면 NULL이 발생하게 되는 것을 볼 수 있다.&lt;br /&gt;
즉 Class 파일에서 View 리소스를 당연하게 사용하고 있던 것은 Inflation 작업을 하였기 때문에 가능하던 것이다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/05/01/Android_inflation.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/05/01/Android_inflation.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android Activity 생명주기</title>
        <description>&lt;h2 id=&quot;1-activity&quot;&gt;1 Activity&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;11-서론&quot;&gt;&lt;strong&gt;1.1 서론&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Activity는 안드로이드 4대 컴포넌트중 하나로 가장 UI에 관련을 가지고있기떄문에&lt;br /&gt;
가장 기본이 되는 구성요소이다.&lt;br /&gt;
&lt;br /&gt;
Activity는 생명주기 안에서 여러 상태로 전환이되며&lt;br /&gt;
활동의 상태 변화에 따라 여러 콜백을 제공한다.&lt;br /&gt;
생성부터 소멸까지 7가지 상태 변화를 가지는 생명주기에 대해 알아볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-생명주기&quot;&gt;2 생명주기&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-3가지-상태에-대해&quot;&gt;&lt;strong&gt;2.1 3가지 상태에 대해&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Activity는 크게 3가지 상태가 존재할수있다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;실행상태(Running) : ActivityStack의 최상위에 존재하며 포커스를 가지고 있어 사용자에게 보이는 상태이다.&lt;/li&gt;
  &lt;li&gt;일시 중지 상태(Paused) : 사용자에게 보이기는 하지만 다른 Activity가 자신보다 위에 있어 포커스를 받지 못하는 상태이다. 예로 대화상자가 나온경우 이다.&lt;/li&gt;
  &lt;li&gt;중지 상태(Stopped) : 다른 Activity에 의해 완전히 가려져 사용자에게 보이지 않는 상태이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;22-7가지-상태에-대해&quot;&gt;&lt;strong&gt;2.2 7가지 상태에 대해&lt;/strong&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/android/life.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;OnCreate : Activity가 최초에 생성될 때 호출되는 메서드이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OnStart : OnCreate 가 호출된 후에 Activity가 사용자에게 보이기 직전에 호출된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OnResume : 사용자와 상호작용하기 직전에 호출된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OnPause : 자신의 Activity가 포커스를 잃었을 때 호출된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;포커스를 다시 얻게 되면 OnResume 가 호출된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OnStop : 다른 Activity에 의해 자신의 Activity가 완전히 가려졌을 때 호출된다.
    &lt;ul&gt;
      &lt;li&gt;포커스만을 잃으면 OnPause 이고 포커스만이 아니라 Activity까지 보이지 않으면 OnStop까지 진행된다.&lt;/li&gt;
      &lt;li&gt;다시 Activity가 화면에 보이면 OnRestart가 호출된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OnDestroy : Activity가 소멸되기 직전에 호출된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;상태에-대한-사용-예&quot;&gt;&lt;strong&gt;상태에 대한 사용 예&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;위에서 7가지 상태에 대해 알아보았고&lt;br /&gt;
이 상태를 어느 상황에서 잘 적용할 수 있는지 예로 알아볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;OnCreate : 최초에 실행되는 메서드이기 때문에 초기화 작업 등 Activity의 생성자와 비슷한 역할을 수행할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OnResume : 상호작용하기 직전에 호출되기 때문에 애니메이션을 시작하는 등 어떠한 동작을 받기 전 작업을 수행할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onPause : 포커스를 잃은 Activity가 다시 포커스를 얻을 것이라고 확신할 수 없다. 따라서 각종 데이터를 임시저장할 필요가 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-예외상황&quot;&gt;3. 예외상황&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;31-다이얼로그&quot;&gt;&lt;strong&gt;3.1 다이얼로그&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Activity에서 다이얼로그를 띄우게 되면 Activity의 포커스를 잃기 때문에&lt;br /&gt;
OnPause가 호출될 줄 알았지만 그렇지 않았다.&lt;br /&gt;
그 이유는 다이얼로그는 Activity의 일부이기 때문이었다.&lt;br /&gt;
따라서 아무런 콜백이 호출되지 않는다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/30/Activity-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/30/Activity-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android 에서 Context가 무엇일까</title>
        <description>&lt;h2 id=&quot;1-궁금증&quot;&gt;1 궁금증&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;11-서론&quot;&gt;&lt;strong&gt;1.1 서론&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Context라는 알 것 같은 하지만 모르겠는 이 친구에 대해 알아보려 한다.&lt;br /&gt;
흔히 activity를 띄우거나  앱의 패키지 이름이나 리소스의 데이터를 가져올 때 context를 사용한다.&lt;br /&gt;
하지만 왜 사용해야 하는지를 잘 모르고 사용한 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 한번 알아보려고 한다.&lt;/p&gt;

&lt;h3 id=&quot;12-언제-사용하는-걸까&quot;&gt;&lt;strong&gt;1.2 언제 사용하는 걸까&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;“Interface to global information about an application environment.&lt;br /&gt;
This is an abstract class whose implementation is provided by the Android system.&lt;br /&gt;
It allows access to application-specific resources and classes, &lt;br /&gt;
as well as up-calls for application-level &lt;br /&gt;
operations such as launching activities, broadcasting and receiving intents, etc.”&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Context는 애플리케이션에 대해 시스템이 관리하고 있는 정보에 접근하거나&lt;br /&gt;
안드로이드 시스템 서비스에서 제공하는 API를 사용할 수 있는 기능을 가지고 있다.&lt;br /&gt;
​위의 내용을 보면 정보에 접근하거나 기능을 사용할 때 필요한 것으로 보인다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Context는 마치 신분증 같은 생각이 든다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-context-에-대해&quot;&gt;2 Context 에 대해&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-context를-왜-사용해야-하는-걸까&quot;&gt;&lt;strong&gt;2.1 Context를 왜 사용해야 하는 걸까&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
안드로이드에서는 애플리케이션과 프로세스가 별도로 관리된다.&lt;br /&gt;
프로세스는 OS에 의해 관리되고&lt;br /&gt;
애플리케이션은 ActivityManagerService에 의해 관리된다.&lt;br /&gt;
즉 애플리케이션의 관련 정보를 가지고 있는 것은 ActivityManagerService이다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/android/ActivityManagerService.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;ActivityManagerService는 &lt;strong&gt;통합 문의 채널 역할&lt;/strong&gt; 을 수행한다.&lt;br /&gt;
즉 하나만의 앱에 대해 명령을 수행하는 것이 아닌&lt;br /&gt;
여러 앱을 통합해서 관리하는 구조이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에서 Context는 신분증과 같다고 하였다&lt;br /&gt;
그 이유는 위 그림으로 알 수가 있는데&lt;br /&gt;
ActivityManagerService 입장에서는 자신에게 온 요청이 어느 앱의 요청인지 파악해야 작업을 수행할 수 있다.&lt;br /&gt;
여기서 &lt;strong&gt;어느 앱인지 식별할 수 있는 정보가 Context이다.&lt;/strong&gt; &lt;br /&gt;
&lt;br /&gt;
그렇기 때문에 Context는 자신이 누구인지 알리는 신분증 같은 존재이다. &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-context의-종류&quot;&gt;&lt;strong&gt;2.2 Context의 종류&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
Context는 Application Context 와 Activity Context로 구분된다.&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/android/context.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Application Context는 각 Application에서 유일하다.&lt;br /&gt;
싱글톤이며 앱이 살아있는 동안 변경이 일어나지 않는다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Activity Context는 각 Activity에 유일하다.&lt;br /&gt;
Activity는 Application의 기본 요소이기 때문에 Activity는 Application에 종속되고&lt;br /&gt;
결과적으로 &lt;strong&gt;Application Context 안에 ActivityContext가 존재하게 된다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-메모리-누수&quot;&gt;&lt;strong&gt;2.3 메모리 누수&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;결국 위와 같이 ActivityContext는 Application Context 안에 있으니까&lt;br /&gt;
Application Context만 쓰면 괜히 고민해서 사용할 필요가 없다고 생각할 수 있다.&lt;br /&gt;
하지만 각 종속을 생각하면 그렇지 않다.&lt;br /&gt;
ActivityContext는 Activity에 종속되어 있다.&lt;br /&gt;
즉 Activity가 파괴되면 ActivityContext도 같이 파괴가 된다.&lt;br /&gt;
&lt;br /&gt;
하지만 Application Context에 Activity를 참조하게 되면&lt;br /&gt;
Activity가 파괴되더라도 참조가 유지가 되기 때문에&lt;br /&gt;
Activity가 가비지에 의해 정리되지 않는다.&lt;br /&gt;
따라서 메모리 누수가 발생한다.&lt;br /&gt;
오래 보존해야 하는 Context가 있을 때 말고는 사용하지 않도록 해야 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-결론&quot;&gt;3 결론&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;안드로이드는 여타 다른 OS 플랫폼처럼 &amp;lt;애플리케이션 = 프로세스&amp;gt; 의 구조가 아니다.&lt;br /&gt;
따라서 애플리케이션 관련 정보를 얻기 위해서는 자신이 어떤 프로세스인지 알려주는 것이 아닌&lt;br /&gt;
자신이 부여받은 신분증 을 제시하는 것으로 관련 정보를 얻을 수 있다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/29/Context%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/29/Context%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android Intent에서의 Bundle</title>
        <description>&lt;h2 id=&quot;1-intent&quot;&gt;1 Intent&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;인텐트는 메시징 객체로 다른 요소로부터 작업을 요청하는 데 사용할 수 있다.&lt;br /&gt;
대표적으로 사용하는 방법이 역시 액티비티를 호출하는 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-의문&quot;&gt;2 의문&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;21-intent-에서-데이터-전달&quot;&gt;&lt;strong&gt;2.1 Intent 에서 데이터 전달&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;intent에서 데이터를 전달하는 방법으로 인텐트 내부에 구현되어 있는 putExtra 메서드를 활용하는 방법이 있다.&lt;br /&gt;
여기서 의문점이 드는데&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 두 차 이를 알고 싶다&lt;br /&gt;
위와 같이 두 방식을 사용하게 돼도 &lt;br /&gt;
같은 결과가 이루어지게 되는데 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한눈에 봐도 Bundle를 사용하는 부분이 더 손이 많이 가고 번거로움을 알 수 있다.&lt;br /&gt;
따라서 Bundle를 사용하지 않는 게 더 편해 보이긴 한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-내부-구조-&quot;&gt;&lt;strong&gt;2.2 내부 구조&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;편한 건 Bundle를 사용하지 않는 것이 분명 편한 건 있다.&lt;br /&gt;
하지만 내부 구조를 보면 말이 달라진다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Intent의 putExtra()는 결국 Bundle를 사용하고 있다.&lt;br /&gt;
즉 putExtra()는 단순히 편리함을 위해 도와주고 있는 모습으로 보인다.&lt;br /&gt;
&lt;br /&gt;
그에 반해&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;ArrayMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;unparcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bundle의 메서드를 확인해보면 Map를 활용하여 데이터를 넣고 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-결론&quot;&gt;&lt;strong&gt;2.3 결론&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;그럼 내부적으로는 Bundle를 쓰고 있느니 &lt;br /&gt;
그냥 편리한 Intent의 메서드들을 활용하는 게 좋은 걸까&lt;br /&gt;
&lt;br /&gt;
문제는&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mExtras&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드가 마음에 걸린다.&lt;br /&gt;
데이터를 넣을 때마다 조건문을 한번 통과를 해야 하는 것인데.&lt;br /&gt;
&lt;br /&gt;
그에 반해 Bundle는&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Map에 바로 put 하기 때문에&lt;br /&gt;
데이터를 넣는 양에 따라 속도 차이가 날… 수도 있겠다.&lt;br /&gt;
&lt;br /&gt;
결론적으로 Bundle를 활용하는 게 더 좋아 보인다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/27/Android-Intent%EC%97%90%EC%84%9C%EC%9D%98-Bundle.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/27/Android-Intent%EC%97%90%EC%84%9C%EC%9D%98-Bundle.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Retrofit 사용하여 API 호출하기</title>
        <description>&lt;h2 id=&quot;1-retrofit&quot;&gt;1 Retrofit&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Retrofit는 REST 기반 웹 서비스를 통해 JSON 혹은 그 외의 데이터를 요청하고 &lt;br /&gt;
응답받는 것을 쉽게 하는 라이브러리이다.&lt;br /&gt;
Retrofit는 HTTP 요청을 OkHttp 라이브러리를 사용한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot;&gt;Retrofit 문서 &lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-api-확인-&quot;&gt;&lt;strong&gt;1.1 API 확인&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//baseURL.co.kr/user/login&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pwd&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와같은 API를 호출한다.&lt;/p&gt;

&lt;p&gt;API 성공 응답&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;성공하였습니다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJWyJS9VUZXhwIjoxVpUhJBk03uo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;API 실패 응답&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;아이디 또는 패스워드가 정확하지 않음&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-구현&quot;&gt;2 구현&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-의존성-추가-&quot;&gt;&lt;strong&gt;2.1 의존성 추가&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.9.0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter-gson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.9.0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-apiconstants&quot;&gt;&lt;strong&gt;2.2 ApiConstants&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiConstants&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;BASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://baseURL.co.kr&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;LOGIN_API_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/login&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;API 경로를 한곳에서 관리하려고 만든 kt 파일이다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-retrofitclient-&quot;&gt;&lt;strong&gt;2.3 RetrofitClient&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApiConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//api 의 기본 uri&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Retrofit를 생성하여 사용할 수 있는 Class 파일을 만들어줘야 한다.&lt;bt&gt;&lt;/bt&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;h3 id=&quot;24-응답-받을-데이터-포멧-준비&quot;&gt;&lt;strong&gt;2.4 응답 받을 데이터 포멧 준비&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SerializedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SerializedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SerializedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SerializedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 알아본 성공 실패의 데이터를 기준으로 data class를 만들어줘야 &lt;br /&gt;
api 요청 후 결과를 그대로 받을 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25-api-인터페이스-&quot;&gt;&lt;strong&gt;2.5 API 인터페이스&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ILoginAPI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApiConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LOGIN_API_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsonObject&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;@POST 가있는 것처럼 @GET 등 모두 다양하게 제공한다.&lt;br /&gt;
원하는 메서드를 사용하면 되고&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;@Body는 JSON 을 보낼 때 사용된다.&lt;br /&gt;
리턴으로 위에서 만든 data class 가있는 것을 볼 수 있다.&lt;br /&gt;
서버의 요청 값을 해당 형태로 받는다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;26-logingapi-구현&quot;&gt;&lt;strong&gt;2.6 LogingAPI 구현&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginAPI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;retrofit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetrofitClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;loginApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ILoginAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;addProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;addProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;loginApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loginCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServerLoginResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;retrofit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetrofitClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;loginApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ILoginAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 만든 RetrofitClient에 create() 메서드를 통해  &lt;br /&gt;
위의 Login 인터페이스에서 정의한 엔드 포인트(필요한 자원을 받아올 수 있는 위치)&lt;br /&gt;
POST 메서드와 Login 경로 (/user/login)의 구현체를 만든다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;27-api-호출-&quot;&gt;&lt;strong&gt;2.7 API 호출&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;LoginAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;결과&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;login: it : $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;


        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/26/Retrofit-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/26/Retrofit-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Retrofit 인터셉터 사용하기</title>
        <description>&lt;h2 id=&quot;1-서론&quot;&gt;1 서론&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;인터셉터란 작업의 요청을 가로챈후 특정 작업을 하기위한 용도로 사용되는 역활을 수행한다.&lt;br /&gt;
예로 요청을 수행할때 로그를 출력한다거나&lt;br /&gt;
요청을 할때 반드시 필요한 선행작업이있다면 인터셉터를 사용하여 처리하는경우가있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 글에서는 로깅 작업과 필수파라미터 를 인터셉터로 처리해볼것이다.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-준비-작업&quot;&gt;2 준비 작업&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-의존성-추가-&quot;&gt;&lt;strong&gt;2.1 의존성 추가&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okhttp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging-interceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.8.1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;23-retrofit-client-준비&quot;&gt;&lt;strong&gt;2.3 Retrofit Client 준비&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RetrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;retrofitClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와같이 베이직한 RetrofitClient 가있을때 이곳에 인터셉터를 구현할것이다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-로깅-인터셉션-&quot;&gt;3 로깅 인터셉션 &lt;br /&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Retrofit 를 활용하여 API 통신을 할때&lt;br /&gt;
네트워크의 흐름을 파악하기위한 로깅 을 인터셉터를 활용하여 출력할것이다.&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;31-extension-만들기&quot;&gt;&lt;strong&gt;3.1 Extension 만들기&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isJsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isJsonArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 코드는 response 데이터가 JSON 의 형태인지 JSON Array 의 형태인지 파악하기위해 작성하였다.&lt;br /&gt;
반드시 필요한것은 아니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-retrofit-client-에-인터셉터-추가-&quot;&gt;&lt;strong&gt;3.2 Retrofit Client 에 인터셉터 추가&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;loggingInterceptor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpLoggingInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpLoggingInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isJsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isJsonArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;loggingInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpLoggingInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BODY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loggingInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;먼저 OkHttpClient 를 생성한다.
그후 HttpLoggingInterceptor 를 생성하여 Console 에 Log 를 남기도록한다. &lt;br /&gt;
loggingInterceptor 의 Level 을 설정하면 로깅 인터셉터 완성이다. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 만들어진 HttpLoggingInterceptor를 OkHttpClient 에 추가한후 &lt;br /&gt;
OkHttpClient 를 RetrofitClient에 추가한다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-파리미터-인터셉션-&quot;&gt;4 파리미터 인터셉션 &lt;br /&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;API 요청시 변하는 데이터가 아닌 특수한 Key 값이나 JWT 와 같이&lt;br /&gt;
고정적으로 필요한 데이터가 있을수있다.&lt;br /&gt;
이때 인터셉터를 이용해서 직접 매번 넣어주는것이 아닌 자동으로 넣어줄것이다&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;41-object-만들기&quot;&gt;&lt;strong&gt;4.1 object 만들기&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;BASE_URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.test.com/&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DFf5onmix37b0ChMS6AIzf1oHYc&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;관리를 위해 따로 object로 Key 를 빼두었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-retrofit-client-에-인터셉터-추가-&quot;&gt;&lt;strong&gt;4.2 Retrofit Client 에 인터셉터 추가&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;baseParameterInterceptor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interceptor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Interceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;originalRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

			&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;addedUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addQueryParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;client_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;finalRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addedUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseParameterInterceptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Retrofit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GsonConverterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofitClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;먼저 기본 Request 객체를 chain 에서 얻어온후&lt;br /&gt;
newBuilder 을 통해 Parameter을 넣는 모습을 볼수있다.&lt;br /&gt;
여기서 모든 API 통신에 사용할 KEY 를 넣는다.&lt;br /&gt;
그후 나머지를 기본 Request 로 넣어준후 반환해주는것으로 인터셉터 구현이 끝이난다&lt;br /&gt;
&lt;br /&gt;
이렇게 만들어진 인터셉터를 OkHttpClient 에 추가한후&lt;br /&gt;
OkHttpClient 를 RetrofitClient에 추가한다.&lt;br /&gt;
이렇게 하는것으로&lt;br /&gt;
원하는 데이터를 인터셉터를 사용하여 넣어줄수있었다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/25/Retrofit-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/25/Retrofit-%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android FloationWidget 구현하기</title>
        <description>&lt;h2 id=&quot;요구사항&quot;&gt;요구사항&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;앱 밖에 표시되는 즉 안드로이드 디바이스 화면 에 표시되는 view를 만들고싶다.
 &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현-방법&quot;&gt;구현 방법&lt;/h2&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;화면위에 그리기 원한을 사용한다.&lt;/li&gt;
  &lt;li&gt;서비스에서 view를 호출한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-권한&quot;&gt;1. 권한&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.FOREGROUND_SERVICE&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;화면위에 그리기 권한과 &lt;br /&gt;
안드로이드 오레오 이상에서 서비스를 호출하기위한 포그라운드 서비스 등록
 &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-권한획득-및-서비스-호출&quot;&gt;2. 권한획득 및 서비스 호출&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;serviceIntent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmortalService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1004&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequiresApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;checkPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequiresApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;canDrawOverlays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;callService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;permissionPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequiresApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;permissionPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AlertDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@MainActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;권한이 필요합니다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;화면위의 그리기 권한이 필요&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setPositiveButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;확인&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ACTION_MANAGE_OVERLAY_PERMISSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;nc&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package:$packageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;startActivityForResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;nc&quot;&gt;ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNegativeButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;취소&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;startForegroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;startService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequiresApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;callService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;MainActivity에서는 화면위에 그리기 권한과 서비스 호출을 하고있다.
 &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-서비스-구현&quot;&gt;3. 서비스 구현&lt;/h3&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmortalService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;channelID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;채널id&quot;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;strTitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;타이틀&quot;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;notificationManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NOTIFICATION_SERVICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationManager&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getNotificationChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channelID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationCompat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;channelID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;strTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;NotificationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IMPORTANCE_HIGH&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;notificationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createNotificationChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationCompat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setSmallIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mipmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ic_launcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContentText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;노티 텍스트&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notificationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;startForeground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;initView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// inflater 를 사용하여 layout 을 가져오자&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;inflate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LAYOUT_INFLATER_SERVICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LayoutInflater&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 윈도우매니저 설정&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;windowManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WINDOW_SERVICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TYPE_APPLICATION_OVERLAY&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TYPE_SYSTEM_ALERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Android O 이상인 경우 TYPE_APPLICATION_OVERLAY 로 설정&lt;/span&gt;
            
            &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FLAG_NOT_FOCUSABLE&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FLAG_NOT_TOUCH_MODAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FLAG_WATCH_OUTSIDE_TOUCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;PixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TRANSLUCENT&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 위치 지정&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CENTER_VERTICAL&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// activity_overlay.xml 불러오기&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_overlay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;overlayButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;overlayButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;오버레이&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initView: 버튼 클릭&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;windowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 서비스의 역활은 죽지않는 서비스를 위한 Notification channel 생성과 &lt;br /&gt;
xml 파일을 WindowManager에게 적용시켜 &lt;br /&gt;
앱 밖에 표시되도록 한다. &lt;br /&gt;
 &lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-앱-밖에-표시될-화면&quot;&gt;4. 앱 밖에 표시될 화면&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/btn&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:textColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12dp&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/52993842/115334969-47d34200-a1d7-11eb-9dff-8f6d0804a906.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/52993842/115334983-4dc92300-a1d7-11eb-8608-c20a9b6cc2c6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/20/FloationWidget%EB%A7%8C%EB%93%A4%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/20/FloationWidget%EB%A7%8C%EB%93%A4%EA%B8%B0.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>XamarinForm</title>
        <description>&lt;p&gt;여기에 작성되는 내용은 XamarinForm 을 통해 Android를 개발하면서 &lt;br /&gt;
나중에 필요할 때 다시 찾기도 하고 &lt;br /&gt;
다음 사람이 왔을 때 내가 같이 없는 경우 헤매지 않게 하기 위한 내용이다.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-데이터-관리&quot;&gt;1. 데이터 관리&lt;/h2&gt;
&lt;p&gt;같은 포맷의 데이터를 한곳에서 관리하지 않고 이곳저곳에서 하드코딩하여 사용하다 보면 &lt;br /&gt;
간단하게 변경하려할때도 위치를 찾아야하고 &lt;br /&gt;
큰 변경 있을 때는 매우 힘들어진다.&lt;br /&gt;
그래서 같은 포멧의 데이터는 한곳에서 관리하고 다른곳에서 참조하여 사용하게 하는것이 좋다.&lt;br /&gt;&lt;br /&gt;
~&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/1/ReadonlyString.md&quot;&gt;1.1 static readonly로 문자열 관리&lt;/a&gt;~&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/1/Resources.md&quot;&gt;1.2 Resources파일로 문자열 관리&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/1/ResourceDictionary.md&quot;&gt;1.3 ResourceDictionary로 Color,Style 관리&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-mvvm&quot;&gt;2. MVVM&lt;/h2&gt;
&lt;p&gt;MVVM으로 개발을 하는 방법을 기록할것이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/2/VIewModel.md&quot;&gt;2.1 ViewModel&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/2/ICommand.md&quot;&gt;2.2 ICommand&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/2/VIewBinding.md&quot;&gt;2.3 ViewBinding&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/2/INotifyPropertyChanged.md&quot;&gt;2.3 INotifyPropertyChanged&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-null-체크&quot;&gt;3. Null 체크&lt;/h2&gt;
&lt;p&gt;개발을 하면서 Null로 인한 문제가 많이 발생한다.&lt;br /&gt;
사용자에게 입력받는 Control에서도 발생하고 예상하지 못한 로직에서 Null이 발생한다&lt;br /&gt;
따라서 흐름에있어 중요한 부분은 반드시 Null체크를 해야한다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/3/ControlNullCheck.md&quot;&gt;3.1 ControlNullCheck&lt;/a&gt;  &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-control&quot;&gt;4. Control&lt;/h2&gt;
&lt;p&gt;안드로이드 개발 특성상 로직만을 개발하는것이 아닌 사용자 환경에서의 UI 개발이 필요하다.&lt;br /&gt;
안드로이드 네이티브의 경우 레퍼런스가 많이 존재하지만&lt;br /&gt;
Xamarin의 레퍼런스는 매우 적기때문에 이곳에서 기록할 것이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/4/Entry.md&quot;&gt;4.1 Enrty&lt;/a&gt;  &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;android&quot;&gt;Android&lt;/h2&gt;
&lt;p&gt;XamarinForms는 AOS 와 IOS 를 공유코드로 동시개발하는 장점이있지만&lt;br /&gt;
AOS,IOS 의 공통적인 부분만을 공유코드로 작성할수있다.&lt;br /&gt;
즉 공통된 기능이 아닌경우 각 네이티브 기능을 사용해야 하는경우가 반드시 생기게되는데&lt;br /&gt;
이곳에서는 각 네이티브 자원을 사용하는 방법을 기록할 것이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/android/DependencyService.md&quot;&gt;안드로이드 자원 사용하기&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;XamarinForms 에서 특정 기능을 구현한 예시를 이곳에 기록할것이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/development/FCM.md&quot;&gt;FCM&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;codeconventions&quot;&gt;CodeConventions&lt;/h2&gt;
&lt;p&gt;아직 미숙하지만 코드작성 규칙을 조금씩 정해갈 예정이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/%EB%B3%80%EC%88%98.md&quot;&gt;변수&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/%EC%84%A0%EC%96%B8.md&quot;&gt;선언&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/%ED%95%A8%EC%88%98.md&quot;&gt;함수&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/%EC%A3%BC%EC%84%9D.md&quot;&gt;주석&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/XAML.md&quot;&gt;AXML&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/codeConventions/RecycleViewModel.md&quot;&gt;RecycleViewModel&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;etc&quot;&gt;ETC&lt;/h2&gt;
&lt;p&gt;XamarinForms 개발을 진행하면서 발생되었던 문제 해결 방법이나 기타 사용방법을 기록할것이다.&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/etc/euc-kr.md&quot;&gt;EUC-KR 인코딩 문제&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/etc/StackTrace.md&quot;&gt;StackTrace&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/etc/SyncFusionListViewHeader.md&quot;&gt;SyncFusionListviewHeader&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/etc/%EB%8F%99%EA%B8%B0%EC%97%90%EC%84%9C_%EB%B9%84%EB%8F%99%EA%B8%B0%ED%98%B8%EC%B6%9C.md&quot;&gt;동기에서 비동기호출&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/k4keye/XamarinDocument/blob/main/etc/CodeSnippet.md&quot;&gt;CodeSnippet&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;fire-writer&quot;&gt;:fire: Writer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/k4keye&quot;&gt;k4keye&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/JJinggg&quot;&gt;JJinggg&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/survival/2021/04/15/XamarinForms.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/survival/2021/04/15/XamarinForms.html</guid>
        
        
        <category>Survival</category>
        
      </item>
    
      <item>
        <title>Android 다크모드 적용하기</title>
        <description>&lt;h2 id=&quot;1-서론&quot;&gt;1 서론&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Android 10부터 Dark theme를 지원하기 시작하여&lt;br /&gt;
이제 앱은 기본적으로 밝은 화면, 어두운 화면을 둘 다 제공해야 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 글에서는 기본적으로 제공하는 테마에서 원하는 &lt;br /&gt;
color이나 style 등을 적용시키는 방법을 알아볼 것이다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-android-theme&quot;&gt;2 Android Theme&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-기본-theme-&quot;&gt;&lt;strong&gt;2.1 기본 Theme&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Base application theme. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.TestApp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Primary brand color. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorPrimary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/purple_500&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorPrimaryVariant&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/purple_700&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnPrimary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/white&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Secondary brand color. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSecondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/teal_200&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorSecondaryVariant&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/teal_700&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;colorOnSecondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/black&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Status bar color. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android:statusBarColor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tools:targetApi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;l&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;?attr/colorPrimaryVariant&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Customize your theme here. --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Android 프로젝트를 생성하면 이제는 위와 같은 Theme를 제공한다.&lt;br /&gt;
colorPrimary, textColorPrimary, windowBackground, navigationBarColor 등등&lt;br /&gt;
머티리얼 테마에서 미리 정의가 되어있는 item을 기본 상태로 사용할 수도 있고&lt;br /&gt;
재정의하여 원하는 색으로 적용할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이것이 가능한 이유는&lt;br /&gt;
안드로이드에서 특정 위치의 색상이 직접 기입된 것이 아니라&lt;br /&gt;
위에서 보이는 테마의 속성을 참조하도록 하였기 때문이다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-테마에-해당하는-color파일-생성하기&quot;&gt;&lt;strong&gt;2.2 테마에 해당하는 Color파일 생성하기&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;다크모드 , 라이트 모드 에 해당하는 Color 을 배치하는 방법은 간단하다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/res/values
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본적으로 color이나 style 파일을 저장하는 values 폴더는 밝은 테마가 기본이며 &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/res/values-night
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;values-night 폴더에 들어가는 같은 이름의 color , style는 다크 테마에 적용된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-테마에-해당하는-image파일-생성하기-&quot;&gt;&lt;strong&gt;2.3 테마에 해당하는 Image파일 생성하기&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;darwable-hdpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 기본으로 제공되는 폴더는 밝은 테마에 적용이 되는 이미지이다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;darwable-night-hdpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;darwable-night 폴더에 들어가는 같은 이름의 Image 는 다크 테마에 적용된다. &lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/114807402-4d004d80-9de1-11eb-8b08-c15371694a86.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;위처럼 각 해당하는 폴더에 이미지를 넣으면 테마에 맞춰 적용된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-기본-테마-수정하기-&quot;&gt;&lt;strong&gt;2.4 기본 테마 수정하기&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Base application theme. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.TestApp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       ...

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:Tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Base application theme. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.testApp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위처럼 제공하는 테마에서 추가를 하고 싶다면 &lt;br /&gt;
values.xml에서 &lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testColor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;좌측에 리소스 포맷을 적고 사용될 속성 명을 적는다.&lt;br /&gt;
즉 testColor라는 속성은 color을 가지는 리소스이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 themes에서 해당 리소스를 추가한다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Customize your theme here. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testColor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@color/#ff00ff&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 화이트 / 다크 모드에서 적용할 것이기 때문에 두 곳 모두 색에 맞춰 추가한다.&lt;br /&gt;
이제 xml 안에 존재하는 widget에서 사용할 때는&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android:textColor=&quot;?attr/testColor&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 사용하면 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;attr 은 뒤에 있는 속성 이름으로 값을 찾아오라는 의미이다.&lt;br /&gt;
내가 지금 다크 테마 상태라면 다크 테마에서 해당 속성 이름의 값 찾아오게 되고&lt;br /&gt;
라이트 테마 상태라면 라이트 테마에서 해당 속성 이름의 값을 찾아온다&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-코드에서-강제로-모드-전환-&quot;&gt;&lt;strong&gt;2.4 코드에서 강제로 모드 전환&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;Android의 설정으로 사용자가 테마를 변경하는것이 아닌
앱 자체에서 테마를 전환시킬수있다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefaultNightMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MODE_NIGHT_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//다크모드 사용안함&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefaultNightMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MODE_NIGHT_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다크모드&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Android 설정에 맞추기&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 안드로이드 10 이상&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefaultNightMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MODE_NIGHT_FOLLOW_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 안드로이드 10 미만&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDefaultNightMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppCompatDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MODE_NIGHT_AUTO_BATTERY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/android/2021/04/15/AndroiddackMode.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/android/2021/04/15/AndroiddackMode.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>JIRA 처음 사용하기</title>
        <description>&lt;h2 id=&quot;1-jira&quot;&gt;1. JIRA&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이번 글에서는 처음 JIRA를 사용하는 사람도 쉽게 따라할수있도록
프로젝트 생성부터 시작해서 기본적인 커스터마이징까지 적용시켜볼것이다.&lt;/p&gt;

&lt;h3 id=&quot;11-jira-란&quot;&gt;&lt;strong&gt;1.1 JIRA 란&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;JIRA는 원래 버그 및 이슈 트레커로 고안된 제품으로&lt;br /&gt;
지금은 에자일, 데브옵스 프로젝트를 협업하기 위한 도구로 많이 사용된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결국 어떠한 프로젝트를 협업하고 문서화하는 도구라고 할 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-jira를-통해-할-수-있는-일&quot;&gt;&lt;strong&gt;1.2 JIRA를 통해 할 수 있는 일&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;JIRA는&lt;br /&gt;
팀원이 해야 할 일에 대한 워크플로를 정의하여&lt;br /&gt;
그에 따라 진행하고 서로의 상태를 확인 하거나&lt;br /&gt;
업무에 대해 계층적으로 표현하여 업무들을 정리할 수 있다&lt;br /&gt;
&lt;br /&gt;
데이터를 기반으로 한 시각적인 표현으로 업무의 효율을 상승시킬 수 있다&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-jira-시작&quot;&gt;2. JIRA 시작&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-프로젝트-생성&quot;&gt;&lt;strong&gt;2.1 프로젝트 생성&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;JIRA 에 가입후 프로젝트 생성을 하자.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/1.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;프로젝트 이름을 지정하고&lt;br /&gt;
키를 지정해야 하는데 프로젝트 이름을 지정하면 자동으로 키도 입력해 주지만
따로 지정해도 상관없다. 해당 키는 나중에 깃허브와 JIRA의 이슈를 연결할 때 사용 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/2.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;그렇게 만들어진 프로젝트를 들어가면 위와 같이 칸반 보드에 4가지 영역이 존재한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 영역은 이슈에 대한 진행 상황을 한눈에 쉽게 표현하게 되는데&lt;/p&gt;

&lt;p&gt;이 영역을 수정할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-칸반-보드-수정&quot;&gt;&lt;strong&gt;2.2 칸반 보드 수정&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/3.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;해당 프로젝트 좌측 상단에서 보드 설정을 누른다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/4.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;보드 설정에서 열 설정에 들어가면 해당 보드를 수정할 수 있는데
열 추가를 눌러 영역을 추가할 수 있다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;행추가와 열추가가 보이지만
행추가는 열안에서 여러 행으로도 나뉘어서 사용할수있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예로 코드리뷰 라는 열을 만든다면
그안에 코드리뷰 전 , 코드리뷰 후 와 같이 하나의 열에 여러개의 행을 두어 관리할수있다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/5.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;진행 중 과 완료 사이에
진행 완료 와 리뷰 중을 추가해 보았다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/6.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;다시 칸반 보드를 보면 추가한 영역이 적용된 것을 볼 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-jira-이슈-수정&quot;&gt;&lt;strong&gt;2.3 JIRA 이슈 수정&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/7.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;이슈를 생성하려 하면 이슈 유형을 선택하게 되는데
기본적으로 제공해 주는 것 말고 새로운 이슈 유형을 추가해보자.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/8.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;우측 상단에서 이슈를 클릭한다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/9.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;해당 프로젝트의 이슈 유형 구성 표를 편집하여&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/10.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;이슈 유형을 추가한다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/11.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;플랫폼이라는 이슈 유형을 추가해보았다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 이슈의 아이콘을 변경하려 하면&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/12.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;이슈 유형에서 변경하고 싶은 유형을 편집하여&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/13.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;아이콘을 변경할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-이슈-유형-분류&quot;&gt;&lt;strong&gt;2.4 이슈 유형 분류&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;먼저 위에서 기본적으로 제공되는 이슈 유형들의 역할을 알아볼 것이다.&lt;br /&gt;
위에서 제공되는 기본 유형은
애픽, 스토리, 작업 , 버그인데&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;버그는 말 그대로 버그 인 것이고
나머지의 역할이 중요하다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;애픽은 스토리들의 집합이다. 즉 한 분류의 중심이 되는 이슈이다.&lt;br /&gt;
스토리는 사용자가 직접적을 사용되는 기능 혹은 애픽을 구성하는 기능들이다.&lt;br /&gt;
작업은 직접적인 구현이 아닌 애픽 혹은 스토리의 부가적인 디자인 문서, 기획문서 등이다.&lt;br /&gt;
서브 작업은 스토리 혹은 작업을 구현하기 위한 작업이다.&lt;br /&gt;
실제 내가 사용하고 있는 이슈의 예시이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이게 정석적인 방법은 아닐 것이고 나의 환경에 맞춰서 지정한 것이니 참고만 해야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/14.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;회원 기능과 통계 기능을 구현하려 할 때
대분류는 애픽으로 들어가게 된다.
회원 기능을 완성하기 위해 필요한 기능들을
중분류로써 스토리에 들어간다.
해당 스토리를 구현하기 위한 작업들을 서브 작업에 두었다.&lt;/p&gt;

&lt;h2 id=&quot;3-jira-와-github-연동&quot;&gt;3. JIRA 와 GitHub 연동&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;31-github-연동&quot;&gt;&lt;strong&gt;3.1 GitHub 연동&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/15.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;JIRA에서 앱을 클릭한다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/16.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;GitHub 을 검색하여 다운로드하고 Get Started를 통해 깃허브 로그인을 통해&lt;/p&gt;

&lt;p&gt;프로젝트와 연결한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-git-commit를-jira-이슈와-연결&quot;&gt;&lt;strong&gt;3.2 Git Commit를 JIRA 이슈와 연결&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;JIRA의 이슈를 작업한 후 해당 내용을 GIt에 Commit를 할 텐데
이 내용을 해당 JIRA 이슈와 연결할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/17.png?raw=true&quot; /&gt;
    &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
이슈를 생성하면 위와 같이
이슈 식별 문자가 같이 생성이 되는데
앞 문자는 프로젝트 생성할 때 기입했던 키이다.
뒤의 숫자는 이슈 순서이다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/18.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;해당 이슈를 작업한 후 Commit 메시지에 JIRA 이슈 식별 문자를 포함 시킨 후 PUSH를 하게 되면&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/19.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;위와 같이 JIRA의 해당 이슈 개발 탭에 커밋 내용 추가가 된다.
이를 클릭해보면&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/20.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;커밋 명을 볼 수 있고 클릭하면 GItHub를 통해 해당 Commit를 보여준다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-이슈-관리&quot;&gt;4. 이슈 관리&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;41-이슈-필터-만들기&quot;&gt;&lt;strong&gt;4.1 이슈 필터 만들기&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;JIRA가 아무리 한눈에 전체적인 상황을 볼 수 있다고 해도
그건 적은 양의 이슈가 있을 때의 얘기인 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이슈가 쌓이다 보면&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/21.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;너무 보기 힘들다&lt;/p&gt;

&lt;p&gt;이럴 때 필터를 사용해서 내 맘대로 쉽게 볼 수 있게 할 수 있다.&lt;/p&gt;

&lt;p&gt;필터는 JQL을 사용해서 작성하지만 JQL로 변환해 주는 곳이 있다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/22.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;JIRA 상단에 위치한 필터에서 고급 이슈 검색을 들어가자.
&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/23.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;그러면 위와 같이 설정을 해서 이슈를 검색할 수 있는데 오른쪽을 보면 설정한 옵션을 JQL로 전환하는 버튼이 있다.
&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/24.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;위와 같이 전환된 JQL을 복사해서 등록시키면 된다.
&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/25.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;빠른 필터에 복사해둔 JQL을 붙여 넣으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
다시 보드로 돌아가서
&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/JIRA/26.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;이렇게 원하는 필터들을 만들어 사용할 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/essentialtool/2021/01/25/JIRA-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/essentialtool/2021/01/25/JIRA-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
        
        
        <category>EssentialTool</category>
        
      </item>
    
      <item>
        <title>도커에서 자주 사용하는 명령어들</title>
        <description>&lt;h2 id=&quot;1-서론&quot;&gt;1 서론&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Docker를 사용해 서비스를 운영해 보면서&lt;br /&gt;
자주 사용했던 명령어들에 해서 기록하려 한다.&lt;br /&gt;
이 글에 있지 않은 수많은 Docker 명령어들이 있지만 나에게는 여기서 나오는 명령어들로 사용하고 있다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-이전-글&quot;&gt;&lt;strong&gt;1.1 이전 글&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://k4keye.github.io/docker/2020/12/30/%EB%8F%84%EC%BB%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html&quot;&gt;도커 시작하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-docker-이미지-관련&quot;&gt;2 Docker 이미지 관련&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-image-확인-&quot;&gt;&lt;strong&gt;2.1 Image 확인&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;로컬에 있는 모든 Image를 확인하기 위해서는&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 명령으로 수행할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerimages.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-image-제거&quot;&gt;&lt;strong&gt;2.2 Image 제거&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;다운로드하거나 직접 만든 Image를 제거할 때는&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi {이미지 명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rmi를 통해 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 2.1의 Image 확인과 조합하여&lt;br /&gt;
모든 이미지를 제거할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi `docker images`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-image-만들기-&quot;&gt;&lt;strong&gt;2.3 Image 만들기&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Docker Hub 에 있는 이미지에 조금 더 부가적인 추가를 하여 개인적인 Image를 만들 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Image를 만들기 위해서는 dockerfile라는 파일이 필요하게 되는데&lt;br /&gt;
한 디렉터리 안에는 하나의 dockerfile를 둘 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;dockerfile에는 각각의 명령어들이 존재하는데&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;▶ FROM : 이미지 생성할 때 사용될 베이스 이미지 지정&lt;br /&gt;
▶ RUN : 이미지를 생성하는 과정에서 실행될 명령어&lt;br /&gt;
▶ WORKDIR : 명령을 실행할 위치&lt;br /&gt;
▶ ENTRYPOINT : 컨테이너 실행 시 수행할 명령어&lt;br /&gt;
▶ ENV : 환경 변수 설정&lt;br /&gt;
▶ COPY : 로컬에 있는 파일을 컨테이너로 복사.&lt;br /&gt;
&lt;br /&gt;
위의 명령어들을 조합해서 최대한 dockerfile를 작성해 볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; centos:7&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;net-tools
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;git clone &lt;span class=&quot;s2&quot;&gt;&quot;https://k4keye.github.com/project.git&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; test.sh /home&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TZ=Asia/Seoul&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/project/Bash/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;700 start.sh

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/bin/bash&quot;,&quot;/home/project/Bash/start.sh&quot;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
해당 image는 centos7을 기준으로 간다.&lt;br /&gt;
이미지를 생성할 때 해당 이미지에&lt;br /&gt;
update , git, net-toole 을 install 하고&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;git 프로젝트를 clone 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로컬에 있는 test.sh를 컨테이너에 /home 경로로 복사한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;timezone 을 서울로 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;clone를 받은 프로젝트로 경로를 이동하여 실행 권한을 준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨테이너가 실행될 때 해당 프로젝트 안에 있는 shell 을 실행시킨다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24dockerfile를-image로-build-하기-&quot;&gt;&lt;strong&gt;2.4dockerfile를 image로 build 하기&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;위에서 만든 dockerfile를 사용하기 위해서는 image로 만들어야 한다.&lt;br /&gt;
해당 파일이 있는 경로에서&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t {이미지 명} .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;build 명령어를 통해 수행할 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-컨테이너-관련&quot;&gt;3 컨테이너 관련&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;31-컨테이너-생성-&quot;&gt;&lt;strong&gt;3.1 컨테이너 생성&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;이전 글에서 보았듯이 Docker Hub에 있는 Image를 사용하거나 이미 로컬에 있는 &lt;br /&gt;Image를 사용하여 컨테이너를 생성하기 위해서는&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run {이미지 명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 RUN 명령어를 통해 수행할 수 있었다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 run 을 사용할때도 수많은 옵션을 통해 더 실용성 있는 컨테이너로 태어날 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이중 몇 가지 사용하는 것만 설명하면&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-v 볼륨을 연결한다.&lt;br /&gt;
-p 포트를 연결한다.&lt;br /&gt;
–name  컨테이너의 이름 지정&lt;br /&gt;
–restart=always : 도커가 실행될때 해당 컨테이너 자동 실행&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 명령어들을 모두 사용하여 run을 한다고 하면&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dcker run --restart=always --name testcont -v $(pwd):/home/developer -p 8080:8080 {이미지명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 컨테이너는 도커가 실행되면 자동으로 실행된다.&lt;br /&gt;
컨테이너의 명은 testcont이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로컬의 현재 실행 경로와 컨테이너의 /home/developer 을 연결한다.&lt;br /&gt;
로컬의 8080포트를 컨테이너의 8080 와 연결한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;​
위의 명령어 중 가장 감사하게 사용하는 기능이&lt;br /&gt;
–restart=always 이 부분인데&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실제 컨테이너에는 서비스가 동작 중이고&lt;br /&gt;
서버가 새로 올라가거나(오토스케일 등) 재부팅이 될 경우 컨테이너도 같이 올라와야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;docker 자체를 서비스에 등록만 시켜두면 서버가 부팅에 대한 이벤트를 발생할 때마다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;서비스가 자동으로 올라오니 아주 유용하게 사용하고 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-컨테이너-보기-&quot;&gt;&lt;strong&gt;3.2 컨테이너 보기&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;로컬에 있는 모든 컨테이너를 확인하기 위해서는&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ps 명령어로 확인할 수 있다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerps.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-컨테이너-삭제-&quot;&gt;&lt;strong&gt;3.3 컨테이너 삭제&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;사용하지 않는 컨테이너를 삭제할 때는&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm {컨테이너 명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rm 을 통해 삭제할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한 3.2 와 조합하여&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm `docker ps`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;모든 컨테이너를 삭제할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-컨테이너-시작--종료-&quot;&gt;&lt;strong&gt;3.3 컨테이너 시작 , 종료&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;ps로 확인한 컨테이너 중 특정 컨테이너를 시작, 종료하고 싶다면 &lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start {컨테이너명}
docker stop {컨테이너명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;start , stop로 수행할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-컨테이너-접속&quot;&gt;&lt;strong&gt;3.4 컨테이너 접속&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it {컨테이너명} bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행 중인 컨테이너에 접속하려 할 때는 exec를 통해 접속할 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;36-컨테이너-모니터링&quot;&gt;&lt;strong&gt;3.6 컨테이너 모니터링&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;로컬에서 동작 중인 컨테이너의 CPU, 메모리 상태 등을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stats
docker stats {컨테이너 명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerstats.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;36-컨테이너-로그-확인&quot;&gt;&lt;strong&gt;3.6 컨테이너 로그 확인&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;로컬에서 동작 중인 컨테이너의 로그를 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs {컨테이너 명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/docker/2021/01/03/%EB%8F%84%EC%BB%A4%EC%97%90%EC%84%9C%EC%9E%90%EC%A3%BC%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EB%AA%85%EB%A0%B9%EC%96%B4.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/docker/2021/01/03/%EB%8F%84%EC%BB%A4%EC%97%90%EC%84%9C%EC%9E%90%EC%A3%BC%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EB%AA%85%EB%A0%B9%EC%96%B4.html</guid>
        
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>2021 년도 공부 일지</title>
        <description>&lt;h2 id=&quot;설명&quot;&gt;설명&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;먼저 이글은&lt;br /&gt;
2021년도에 언제 어떤것을 했는지 정리하는 곳이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shell&quot;&gt;Shell&lt;/h3&gt;
&lt;p&gt;2021-01-03 Shell 기본 문법 공부&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;반복적인 단순 작업을 자동화 해보았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c--xamarin&quot;&gt;C# , Xamarin&lt;/h3&gt;
&lt;p&gt;2021-01-25 LINQ 기본 문법 공부 및 기존 코드 리팩토링&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 코드를 리팩토링하여 가독성 높이기 위한 작업을 해보았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2021-02-5 단위 테스트 연습&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 코드의 테스트 코드를 작성해보는것으로 테스트 코드 작성 방법을 알게되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2021-04-30 Extension functions 공부 &lt;br /&gt;
2021-05-06 App Widget 구조 공부&lt;br /&gt;
2021-05-14 메시지 센터 공부&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kotlin&quot;&gt;Kotlin&lt;/h3&gt;
&lt;p&gt;2021-02-23 Kotlin 기초 문법 공부 &lt;br /&gt;
2021-04-30 Extension functions 공부 &lt;br /&gt;
2021-05-02 Coroutine 공부 &lt;br /&gt;
2021-05-14 옵저버 패턴 공부&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;
&lt;p&gt;2021-02-22 Androidx ViewModel ,LiveData 공부&lt;br /&gt;
2021-04-10 Android FCM 적용&lt;br /&gt;
2021-04-15 Android Theme 적용 공부&lt;br /&gt;
2021-04-26 Retrofit 공부&lt;br /&gt;
2021-04-29 Android 생명주기, Context에 대해 공부&lt;br /&gt;
2021-05-02 Android Ui test 공부&lt;br /&gt;
2021-05-05 Naver Map API 적용&lt;br /&gt;
2021-05-31 Koin 사용 방법 공부&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring&quot;&gt;Spring&lt;/h3&gt;
&lt;p&gt;2021-05-16 Spring Data Jpa 공부
2021-05-25 DI 컨테이너 및 IoC 공부&lt;/p&gt;

&lt;h3 id=&quot;도구-제작&quot;&gt;도구 제작&lt;/h3&gt;
&lt;p&gt;2021-02-26 Python을 통한 엑셀관련 자동화 도구 제작&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존에 복수의 서버에서 발생하는 로그를 확인하는것이 어려웠기떄문에 이를 정리해서 Excel로 만들어주는 도구 제작&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문화&quot;&gt;문화&lt;/h3&gt;
&lt;p&gt;2021-01-20 JIRA를 통한 이슈 트레킹 및 코드리뷰 등 사내에 적용&lt;br /&gt;
2021-03-04 회사에 특징에 맞춰 조금 변형된 깃플로우를 사내에 적용&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;etc&quot;&gt;ETC&lt;/h3&gt;
&lt;p&gt;2021-05-19 HTTP API 와 REST API 차이 공부 &lt;br /&gt;
2021-05-22 SOLID 공부 &lt;br /&gt;
2021-06-02 블록체인, FIDO, DID 공부 &lt;br /&gt;
2021-06-25 블록체인 기초 공부 (UTXO, 작업증명) &lt;br /&gt;
2021-06-29 Go 기본 문법 공부 &lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/personal/2021/01/03/2021%EB%85%84%EB%8F%84-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/personal/2021/01/03/2021%EB%85%84%EB%8F%84-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC.html</guid>
        
        
        <category>Personal</category>
        
      </item>
    
      <item>
        <title>도커 시작 하기</title>
        <description>&lt;h2 id=&quot;1-docker&quot;&gt;1 Docker&lt;/h2&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4gTCK%2FbtqQgzkq7Vk%2FIlexoWyawfNyWc4A2hwZQ0%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;11-도커-&quot;&gt;&lt;strong&gt;1.1 도커&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Docker 는 &lt;strong&gt;리눅스 컨테이너&lt;/strong&gt; 기반으로 하여 특정한 서비스를&lt;br /&gt;
구축, 테스트 및 배포를 할 수 있는 오픈소스 플랫폼이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-컨테이너&quot;&gt;&lt;strong&gt;1.2 컨테이너&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;컨테이너란 격리된 공간에서 프로세스가 동작하는 기술로&lt;br /&gt;
가상화 기술 중 하나이지만 흔히 사용하는 VMware 같은 방식과는 차이가 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기존의 가상화 방식은 OS를 가상화를 하는 방식이었다.&lt;br /&gt;
호스트 OS 위에 가상의 하드웨어를 구축하고 그 위에 가상 OS를 구축하다 보니 무겁고 &lt;br /&gt;느리다는 큰 단점이 있었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;​
이를 해결하기 위하는 방법이 도커의 가상화라고 할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;호스트 OS 위에 도 커 엔진을 두어 리눅스 자체에서 제공되는 논리적인 분리 영역으로 컨테이너를 두어 각각의 환경을 격리시켜 사용한다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb0r42x%2FbtqP11wpRRz%2F60rGlaiO4kiNYuvWKMru81%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-도커의-장점-&quot;&gt;&lt;strong&gt;1.3 도커의 장점&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;서비스를 개발할 때 가장 힘 빠지는 일은 역시 인프라 구축일 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉 서버 OS를 구축하고 그 안에 필요한 애플리케이션을 설치하고 설정해야 한다.&lt;br /&gt;
만약 다른 2개의 서비스를 구현해야 하는데 그 안에 필요한 애플리케이션의 버전이&lt;br /&gt; 다르거나 종류가 다르거나 한다면 상상만 해도 벌써 지치는 일이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcUn3G6%2FbtqQfKsZsNs%2FddkSw87NMRjIqX6vsfEeJ0%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
하지만 위와 같은 일들을 도커는 쉽게 해결해 준다.&lt;br /&gt;
컨테이너라는 독립적인 위치에서 각각의 서비스를 구축한다면 이러한 문제를 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-docker-image&quot;&gt;2 Docker Image&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Docker 가 위와 같이 좋은 건 알겠는데 그래서 어떻게 사용하는 걸까?&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;환경을 쉽게 구축한다고 했는데 역시 그렇다고 해도 기존에 사용하여&lt;br /&gt;
익숙한 VMware보다 빠른 것만이 장점이라면 굳이 사용해야 할까&lt;br /&gt;&lt;br /&gt;
만약 한 서비스는 Python2, node 10 가 필요하고 다른 서비스는 Python3 ,node 10 가 필요하다고 예를 들자.&lt;br /&gt;
이때 Vmware를 사용한다면 2개의 가상환경을 구축하고 &lt;br /&gt;
각각에 Python2 , Python3과 node10을 설치할 것이고 &lt;br /&gt;
필요한 IDE 등 여러 애플리케이션을 설치하여 환경을 구축할 것이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약 node를 10을 더 위의 버전으로 올리려고 한다면 다시 가상환경을 새로 만들어야 할 것이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 Docker은 Image를 이용하여 이를 쉽게 해결한다.&lt;br /&gt;
Image는 컨테이너 실행에 필요한 애플리케이션, 설정 등을 포함하고 있는 것으로&lt;br /&gt;
Image를 통해 컨테이너를 생성하면 Image에 있는 정보를 가지고 컨테이너를 생성하게 된다.&lt;br /&gt;
즉 필요한 환경을 Image로 만들고 이를 다른 컴퓨터나 다른 사람에게 공유하게 되면&lt;br /&gt;
모두 같은 환경을 사용할 수 있게 된다.&lt;br /&gt;
만약 여기서도 하나의 애플리케이션 버전을 변경하려고 한다면 &lt;br /&gt;
Image에서 수정하여 다시 사용하면 되는 일이다.&lt;br /&gt;
위와 같이 쉽게 환경을 구성, 교체 가능한 이점으로 Docker 은 지금 많은 개발자들이 사용하는 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-window-docker-설치&quot;&gt;3 Window Docker 설치&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://​https://www.docker.com/get-started&quot;&gt;도커 다운로드 페이지&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-docker-사용하기&quot;&gt;4 Docker 사용하기&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;41-정상-설치-확인-&quot;&gt;4.1 &lt;strong&gt;정상 설치 확인&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;위의 링크에서 도커를 설치하였다면&lt;br /&gt;
역시 빼먹을 수 없는 Hello World를 해보자.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZQzm5%2FbtqQfLFpHQQ%2FbhP7FOK92kpShlJYgtiWp1%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
이 작업이 무슨 작업인지 보면&lt;br /&gt;
도커는 결국 Image를 사용하여 컨테이너를 생성하는 일을 하는 것이다.&lt;br /&gt;
run 명령어를 이용하여 Image를 사용하여 컨테이너를 만들게 되는데.&lt;br /&gt;
지금의 명령은 hello-world라는 Image를 사용하여 컨테이너를 만들라는 명령이다.&lt;br /&gt;
하지만 우리에게는 hello-world의 Image를 만든 적도 받은 적도 없는데 &lt;br /&gt;
어떻게 실행하는 걸까?&lt;br /&gt;
Docker 은 Image를 사용할 때 로컬 서버에서 해당 Image가 있는지 찾아보고&lt;br /&gt;
만약 없다면 Docker Hub에서 hello-world의 Image를 찾아 있다면 다운로드해 실행하게 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbL3x9z%2FbtqQfL6vp2A%2FPD9TbbirLwmgSqrLQMHTM0%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-다운로드한-hello-world-확인&quot;&gt;&lt;strong&gt;4.2 다운로드한 hello-world 확인&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;docker hub에서 hello-world 이미지를 찾고 다운로드해 실행하였다 했는데.&lt;br /&gt;
다운로드했으면 결국 로컬에 존재할 것이다.&lt;br /&gt;
이를 확인해보자.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbnEEfi%2FbtqQhKFZzwa%2FS7P2MgemAQdIDyhjkHdfOk%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
images 명령을 이용하면 로컬 서버에 있는 모든 Image를 볼 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43-컨테이너-확인-&quot;&gt;&lt;strong&gt;4.3 컨테이너 확인&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;위에서 받은 Image를 컨테이너로 만들었기 때문에 실행된 것인데&lt;br /&gt;
이 컨테이너가 존재하는지도 확인해보자.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbe1l2p%2FbtqP0sVbI1l%2Fuaj3PIKrpc9wPOrkCKSkKK%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 어딜 봐도 hello-world 가 컨테이너로 실행 중인 모습을 볼 수 없다.&lt;br /&gt;
이 이유는 이미 해당 컨테이너는 종료되었기 때문이다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;-a 옵션 을 통해 종료된 컨테이너까지 포함해서 모두 찾아보자.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F29cJ9%2FbtqP4kPRLXT%2FqWGSHv1wkRD6KPrk14QN61%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
컨테이너의 ID 와 해당 컨테이너의 이미지, 종료된 지 8분이 지났다는 정보를 볼 수 있다.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/docker/2020/12/30/%EB%8F%84%EC%BB%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/docker/2020/12/30/%EB%8F%84%EC%BB%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html</guid>
        
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>TemplateMethod Pattern</title>
        <description>&lt;h2 id=&quot;1-templatemethod-pattern&quot;&gt;&lt;strong&gt;1 TemplateMethod Pattern&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;11-templatemethod-pattern탬플릿-메소드-패턴&quot;&gt;&lt;strong&gt;1.1 TemplateMethod Pattern(탬플릿 메소드 패턴)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
어떤 작업을 처리하는 일련의 프로세스를 정의해두고&lt;br /&gt;
서브 클래스가 프로세스에 필요한 역할을 구현하여&lt;br /&gt;
요청하는 입장에서는 프로세스를 호출만을 하게 하여&lt;br /&gt;
프로세스의 변동이 생겨도 요청하는 입장에서는 변동이 없게 하는 패턴이다.&lt;br /&gt;
​
동일한 기능은 상위 클래스에서 정의하며 확장 혹은 변화가 발생하는 부분만 서브 클래스에 
&lt;br /&gt;구현한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 프로세스라는 것을 무엇을 의미할까?&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예로들어 크롤링이라는 주제로 코드를 작성하게된다면 하나의 작업을 수행하는것이아닌&lt;br /&gt;
 여러 작업을 수행하여 결과를 도출하게될것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1). 사이트에 접속한다.&lt;/p&gt;

&lt;p&gt;2). 해당 사이트에서 HTML 코드를 가지고온다.&lt;/p&gt;

&lt;p&gt;3). 필요로 하는 부분의 문자를 잘라낸다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와같은 작업을 수행이 모두 마쳐야만 크롤링이라는 작업이 끝나는것일것이다. 여기서 크롤링 작업이 하나의 프로세스이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-요구-사항&quot;&gt;&lt;strong&gt;1.2 요구 사항&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
위에서는 크롤링을 예로 들었지만 이번에는 로그인이라는 하나의 프로세스를 기준으로 봐보자
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlXmu2%2FbtqPgGS2gjA%2FkakLwnxGDPvdTNqVl41Lk1%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;위와 같이 로그인을 시도하는 일련의 프로세스가 필요하다고 &lt;br /&gt;
보았을 때 로그인에 필요한 동작들이 존재한다.&lt;br /&gt;
이것이 로그인의 프로세스이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCQ2Ri%2FbtqPaWbHzON%2FFAQLYXXVkA82mMC6LKCQH0%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
위의 요구 사항을 바탕으로 로그인이라는 템플릿을 두어 &lt;br /&gt;
로그인 요청 로직은 프로세스 자체를 호출시키기만 하게 한다.&lt;/p&gt;

&lt;h2 id=&quot;2-실습&quot;&gt;2. 실습&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;21-코드-구현&quot;&gt;&lt;strong&gt;2.1 코드 구현&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
로그인이라는 하나의 프로세스를 추상 클래스로 구현하였다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginConnect&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PwdSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//패스워드 암호화&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로그인 시도&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//권한 확인&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rquestConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityPwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PwdSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityPwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;일반&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;일반회원&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;관리자&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;관리자&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드중&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PwdSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//패스워드 암호화&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로그인 시도&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//권한 확인&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분은 서브 클래스가 구현하게 되고&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rquestConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분은 로그인 프로세스가 필요한 로직이 호출하게 한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NormalLogin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginConnect&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PwdSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;패스워드 암호화 작업&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;로그인 시도후 로그인 정보 반환&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userinfoAdmin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;로그인 정보를 통해 권한 반환&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;관리자&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;서브 클래스를 두어 프로세스에 필요한 각 로직을 구현한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 되면&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로세스를 호출하는 쪽에서는&lt;br /&gt;
rquestConnection() 메서드만을 호출하게 되고&lt;br /&gt;
나머지 로그인에 필요한 작업은 서브 클래스가 위임하여 처리하게 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉 호출하는 쪽에서는 이제 로그인 프로세스가 확장 혹은 변화가 생기더라도 호출하는 방법을 바꿀 필요가 없다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;LoginConnect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginConnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NormalLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginConnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rquestConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pwd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Flc4On%2FbtqPnaltdN7%2F7w67R8WGnpuMjVOgfZ72CK%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;22-예제-코드&quot;&gt;&lt;strong&gt;2.2 예제 코드&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/k4keye/DesignPattern&quot;&gt;예제 코드 Git 주소&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/TemplateMethod_Pattern.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/TemplateMethod_Pattern.html</guid>
        
        
        <category>DesignPattern</category>
        
      </item>
    
      <item>
        <title>Strategy Pattern</title>
        <description>&lt;h2 id=&quot;1-strategy-pattern&quot;&gt;1 Strategy Pattern&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;11-strategy-pattern전략-패턴&quot;&gt;&lt;strong&gt;1.1 Strategy Pattern(전략 패턴)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
객체들이 할 수 있는 행위들을 클래스로 작성하고 행위를 자유롭게 바꿀 수 있게 하는 패턴으로 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;같은 역할을 하는 여러 알고리즘을 여러 클래스로 작성하고 이를 필요할 때 교체하여 &lt;br /&gt;
사용할 수 있게 하는 디자인 패턴이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉 전체적으로는 같은 동작을 하는 여러 일을 전략적으로 나누어서 쉽게 교체할 수 있게 하는 패턴이다.&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-요구-사항&quot;&gt;&lt;strong&gt;1.2 요구 사항&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FzfkeC%2FbtqPh98sLw0%2FO3q8N11w3EHREzmx0nJq80%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;위와 같이 각각의 로직들이 필요로 하는 기능들이&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;각각의 역할을 수행할 수 있는 알고리즘을 사용해야 할 때&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 알고리즘을 인터페이스로 정의하여 동적으로 바꿔서 사용하게 할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlQxkx%2FbtqPfTZlbM1%2FPFzO7hS3feFfB16xQQH7R0%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;2-실습&quot;&gt;2. 실습&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;21-코드-구현&quot;&gt;&lt;strong&gt;2.1 코드 구현&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
먼저 필요한 것은 모든 로직이 사용할 API를 구현하기 전에&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API에서 전략적으로 바뀔 클래스를 정의할 인터페이스가 먼저 필요하다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAPI&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모든 인터페이스는 Get 과 Post를 사용해야 한다고 보고 위와 같이 구성하였다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 각각의 UserAPI , CheckAPI , SyncAPI에서 위의 인터페이스를 구현한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IAPI&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User API GET 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User API POST 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CheckAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IAPI&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Check API GET 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Check API POST 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IAPI&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sync API GET 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sync API POST 호출&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
지금은 간단하게 호출된 로직을 화면에 출력하는 게 끝이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 모든 로직들이 요청할 API Class를 구현할 것이다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;API&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
이곳에서 중요한 부분이 바로 &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
이 부분인데 해당 API 클래스를 사용할 때는 인터페이스를 구현한 클래스 중 &lt;br /&gt;
어느 클래스로 사용할지를 받게 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 만들어진 전략 패턴을 사용해보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API를 필요로 하는 모든 곳은 API class를 통해 사용해야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
그 후 API 중 어느 API로 갈지를 인스턴스로 넣어줘야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FvWNry%2FbtqPnbYYSQW%2FSn7Nogk3mhDUrN0hQJKmK1%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;이제 새로운 API가 나오더라도 API를 호출하는 방법은 똑같지만&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;setAPI()에서 새로운 API를 추가해서 사용할 수 있게 된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-예제-코드&quot;&gt;&lt;strong&gt;2.2 예제 코드&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/k4keye/DesignPattern&quot;&gt;예제 코드 Git 주소 &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/Strategy_Pattern.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/Strategy_Pattern.html</guid>
        
        
        <category>DesignPattern</category>
        
      </item>
    
      <item>
        <title>Singleton Pattern</title>
        <description>&lt;h2 id=&quot;1-singleton-pattern&quot;&gt;1 Singleton Pattern&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;11-singleton-pattern싱글톤-패턴&quot;&gt;&lt;strong&gt;1.1 Singleton Pattern(싱글톤 패턴)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
싱글톤 패턴이란 하나의 인스턴스를 재활용하여 사용하게 되는 패턴이다.&lt;br /&gt;
하나의 기능 Class를 사용하기 위해 new를 사용하여 새로운 인스턴스를 매번 생성한다면&lt;br /&gt;
그것은 프로그램에 있어 매우 부담스러운 일일 수 있다.&lt;br /&gt;&lt;br /&gt;
이때 Class의 역할이 공유 변수 없이 단순하게 사용되는 역할을 수행한다면&lt;br /&gt;
매번 생성하지 않고 &lt;strong&gt;하나의 인스턴스를 공유&lt;/strong&gt;하여 사용할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-요구-사항&quot;&gt;&lt;strong&gt;1.2 요구 사항&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDzESI%2FbtqPsDiv26C%2F7MWzMnuitruZFaprszIC51%2Fimg.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;2개의 로직이 API라는 하나의 로직을 사용해 아 하는 요구 사항이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-기존-코드&quot;&gt;&lt;strong&gt;1.3 기존 코드&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
이때 싱글 톤을 적용하지 않았다고 한다면&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;기능1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;기능&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;기능2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;기능&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 2개의 기능에서 API의 인스턴스를 매번 생성해 줘야만 한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-실습&quot;&gt;2. 실습&lt;/h2&gt;
&lt;hr /&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위와 같이 API Class의 사용되는 메서드가 2개 있다고 예를 보자.&lt;br /&gt;
이때 2개의 로직에서 해당 Class를 사용할 때 매번 인스턴스를 생성하지 않게&lt;br /&gt;
Singleton Pattern 을 적용시켜보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 적용시킬 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 Class의 인스턴스를 static로 생성시키고&lt;br /&gt;
해당 Class를 사용할 때에는 GetInstance() 메서드를 사용하여&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스를 받아 사용하게 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이로 인해&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위와 같이 새로운 인스턴스를 생성하지 못하게 되고&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위와 같이 인스턴스를 받아서 사용할 수밖에 없게 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-예제-코드&quot;&gt;&lt;strong&gt;2.1 예제 코드&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/k4keye/DesignPattern&quot;&gt;예제 코드 Git 주소 &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/Singleton_Pattern.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/designpattern/2020/12/30/Singleton_Pattern.html</guid>
        
        
        <category>DesignPattern</category>
        
      </item>
    
      <item>
        <title>AWS 서버 아키텍처 구축하기 - 1</title>
        <description>&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;REST API 서버가 필요한 상황이 와서&lt;br /&gt;
AWS를 통해 서버를 구축하게 되었는데 결과적을 구축된 아키텍처 와&lt;br /&gt;
왜 이렇게 사용했는지에 대해 기록하려 한다.&lt;br /&gt;
만약 나처럼 AWS는 처음 다뤄보는 사람에게는 도움이 되길.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-요구-사항&quot;&gt;&lt;strong&gt;1.1 요구 사항&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;부하 테스트를 통해 적절한 스펙의 서버(5분마다 약 1만 건의 API 요청)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;부하 테스트를 통해 적절한 적절한 RDS 구비&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버와 RDS의 이중화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버가 다운되더라도 다시 올라올 수 있게 가용성 유지&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTPS 통신&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;도매인 구입&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-요구-사항-작업&quot;&gt;2. 요구 사항 작업&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;21-aws-ec2&quot;&gt;&lt;strong&gt;2.1 AWS EC2&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/AWS1/ec2.png?raw=true&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;AWS는 다양한 플랫폼을 제공하지만 그중 대표적인 EC2를 이용하여 서버를 구축했다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 문제는 EC2 가 너무 다양하게 제공하는 것인데 운영체제부터 스펙까지 너무 다양했고 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;운영체제는 확장성을 위해 Amazon Linux 2로 선택하였다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스펙은 t3a large를 선택하였는데 &lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391766-6648fb00-4b5e-11eb-94ce-3a2bb80cc8ca.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;더 낮은 스펙으로 구성훈 부하 테스트를 해보니 4CPU 16G 정도의 스펙이 필요하다는 걸 알게 되었고&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이중화로 2개의 EC2를 구비할 것이니 절반인 &lt;strong&gt;2CPU 8G로 2개를 선택&lt;/strong&gt;하였다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-rds&quot;&gt;&lt;strong&gt;2.2 RDS&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391777-6c3edc00-4b5e-11eb-822e-08da3f2db33f.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;RDS는 마리아 DB를 선택하였고 4CPU, 16G를 준비하였다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;RDS 또한 부하 테스트를 통해 적절한 스펙을 찾은 것이고&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;EC2와 같이 이중화를 할 것인데 RDS는 스펙을 절반으로 줄이지 않았다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이유는 이중화에서.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-이중화&quot;&gt;&lt;strong&gt;2.3 이중화&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391795-7365ea00-4b5e-11eb-95b4-76d2d0a3b41a.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;이중화를 하기 위해 사용된 것이 AWS의 로드밸런서(ELB)인데&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로드밸런서를 통해 트래픽을 분산 시 키 2대의 EC2를 적절히 사용할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;RDS의 이중화는 RDS 생성 시 혹은 수정해서 다중 AZ 배포를 활성화할 수 있는데&lt;br /&gt;
기존에 사용하던 Master RDS가 다운되었을 때 Slave RDS가 Master로 승격되어 &lt;br /&gt;
사용자가 따로 건드릴 필요 없이 가용성을 유지시켜준다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-서버의-가용성&quot;&gt;&lt;strong&gt;2.4 서버의 가용성&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391803-7c56bb80-4b5e-11eb-9166-dd4c996b7739.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;서버의 가용성을 유지하기 위해 오토스케일링 을 사용하였다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오토스케일링 이를 사용하여 서버의 CPU 혹은 메모리의 정해둔 임계치까지 도달하면&lt;br /&gt;
서버를 늘리거나 혹은 서버가 다운되면 다른 서버를 생성하는 등 여려 방식이 있지만&lt;br /&gt;
나는 하나의 서버가 다운되면 다시 서버를 올려 서버의 개수를 유지하도록 하였다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25-https&quot;&gt;&lt;strong&gt;2.5 HTTPS&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;HTTPS에서 필요한 인증서는 로드밸런서를 사용하게 되면 공짜로 받을 수 있다.&lt;br /&gt;
따라서 이중화를 하면 자동으로 해결.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;26-도매인&quot;&gt;&lt;strong&gt;2.6 도매인&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://github.com/k4keye/k4keye.github.io/blob/master/images/AWS1/gabia.png?raw=true&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;도매인은 AWS에서 구입이 가능하지만
가비아에서 따로 구입해서 사용하였다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-구성도&quot;&gt;3. 구성도&lt;/h2&gt;
&lt;hr /&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391822-95f80300-4b5e-11eb-983f-aab450fe3887.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-동작-방식-시나리오&quot;&gt;4. 동작 방식 시나리오&lt;/h2&gt;
&lt;h2 id=&quot;41-이상이-없을때&quot;&gt;&lt;strong&gt;4.1 이상이 없을때&lt;/strong&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;사용자는 구입해놓은 도매인을 통해 API를 요청한다.&lt;br /&gt;
해당 도매인은 Route 53에 의해 연결된 로드벨런서로 요청이 전달된다.&lt;br /&gt;
로드벨런서는 요청에 대해 적절히 분산시켜 2개의 EC2에게 전달하여 처리하게 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-ec2-다운&quot;&gt;&lt;strong&gt;4.2 EC2 다운&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;만약 Public1 존 에 있는 EC2가 다운된 경우 로드벨런서에 의해 각 EC2는 체크를 하고 있다가&lt;br /&gt;
트래픽을 Public2 존 에 있는 EC2에게 모두 전달하게 하여 서비스가 중단되지 않게 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 후 오토스케일링에 의해 Public1에 EC2가 생성되고 이를 확인한 로드벨런서는 다시 트래픽을 분산시킨다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43-rds-다운&quot;&gt;&lt;strong&gt;4.3 RDS 다운&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;다중 AZ 배포를 한 RDS 중 Master RDS가 다운되었을 때&lt;br /&gt;
대기하고 있던  Slave RDS가 Master로 승격되어 EC2의 처리 요청에 응답해 준다.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://user-images.githubusercontent.com/52993842/103391830-9c867a80-4b5e-11eb-82f0-42fd98b2179a.jpg&quot; /&gt;
&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/aws/2020/12/30/AWS1.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/aws/2020/12/30/AWS1.html</guid>
        
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>주니어 개발자의 필수도구 Git</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbznpC0%2FbtqPlbShK5o%2F7KEIOIA8hf9eHB0cIKbIm0%2Fimg.png&quot; alt=&quot;어..&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
이번 글에는 개발자로써 선택의 여지가 거의 없다고 할 수 있는 Git에 대해 다뤄보려 한다.
나 또한 Git 을 사용한 지 얼마 되지 않았는데 왜 이전에는 사용하지 않았는지
그리고 왜 이제는 사용하고 있는지 작성하려 한다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1git-을-사용해보지-않은-이유&quot;&gt;1.git 을 사용해보지 않은 이유&lt;/h2&gt;
&lt;hr /&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqDtD5%2FbtqPibrxOGw%2FhKKk1d0AMOuzjU3qDK0OkK%2Fimg.jpg&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;11-git-을-사용하라고-듣기는-많이-듣는데&quot;&gt;&lt;strong&gt;1.1 “Git 을 사용하라고 듣기는 많이 듣는데..”&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;학생 시절 개발 공부를 하면서 듣지 않을 수가 없는 말이 “Git 을 꼭 사용해” 였던 것 같다.&lt;br /&gt;
생각해보면 학교에서는 Git이라는 존재와 사용하는 것을 알려주지는 않았었는데 주변 사람들에게서 듣거나&lt;br /&gt;
기초 개발 관련 서적을 보다 보면 항상 Git을 사용하는 방법을 간단하게나마 대부분 포함되어 있었다.&lt;br /&gt;
하지만 학생 시절 눈앞에 있는 것만을 공부하느라 딱히 다른 것을 시도 해보려 하지 않았던 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-왜-git을-사용하라-하는-걸까&quot;&gt;&lt;strong&gt;1.2 “왜 Git을 사용하라 하는 걸까”&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;사람들이 Git을 사용해야하는 이유들을 보면 코드를 관리하기 쉽게 해준다 라거나&lt;br /&gt;
다른 사람에게 공유하기 쉽게 해준다 하던가 하는데 아무것도 모르는 사람에게 Git에 장점을 알기 쉽게 설명해 주다 보니&lt;br /&gt; 
아무것도 모르는 사람에게는 “그게 뭐가 좋은 건데?”라는 생각을 들게 했던 거 같다.&lt;br /&gt;
역시 모든 것 직접 사용해보고 경험해보지 않으면 알 수 없는 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-알아야-하는-게-너무-많아-&quot;&gt;&lt;strong&gt;1.3 “알아야 하는 게 너무 많아”&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Git을 사용하려 했을 때 GitBash의 많은 명령어들과 무섭게 생긴 CLI 가 나를 반겨주는 걸 보면&lt;br /&gt;
괜히 안 하게 되었던 것 같다.&lt;br /&gt;
그냥 바로 개발을 하고 저장하고 끝내면 되는데&lt;br /&gt;
Git와 연결도 하고 저장할 때도 Git에다가 커밋 메시지 작성도 하고 마지도 하고..&lt;br /&gt;
귀찮다고도 생각하고 너무 어렵다고 생각했던 것 같다.&lt;br /&gt;
하지만 사용해보면 딱히 사용하는 기능도 몇 가지 없고 조금씩 필요한 기능은 그때마다 &lt;br /&gt;찾아서 사용하면 되니&lt;br /&gt;
많은 걸 알아야 된다는 생각이 잘못되었던 것 같다.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-git을-사용하게-된-이유&quot;&gt;2. Git을 사용하게 된 이유&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FSBpz7%2FbtqPeok3jae%2FXMO78vf5I3wFO8zSGjjvN1%2Fimg.png&quot; alt=&quot;이제 사용!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-git의-장점&quot;&gt;&lt;strong&gt;2.1 Git의 장점&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Git 을 사용하는 것으로 크게 얻을 수 있는 것은 매우 많다.&lt;br /&gt;
Git에는 섬세한 작업들을 할 수 있지만 그것은 직접 경험한 사람만이 알 수 있으니
간단히 알 수 있게 보면&lt;br /&gt;
만약 2명이 같이 개발을 진행한다고 하였을 때&lt;br /&gt;
이 두 사람은 어떻게 코드를 공유하고 같이 개발할 수 있을까&lt;br /&gt;
간단하게 생각해보면 서로 작업할 부분을 약속하고 나서&lt;br /&gt;
한 명이 다른 한 명에게 자신이 만든 코드를 USB로 보내주던지 메일로 보내주든지 해서
합쳐달라고 해야 할 것이다. 학생 시절에 그렇게 했다..&lt;br /&gt;&lt;br /&gt;
Git으로 개발하게 되면 한 명이 다른 한 명에게 코드를 전달하여 합쳐달라고 할 필요가 없다.&lt;br /&gt;
서버에 프로젝트를 올려두고&lt;br /&gt;
두 명의 사람이 각자의 개발이 끝나면 그 부분을 서버에 올려두면 알아서 합쳐지는 일일 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-내가-git-을-사용하게-된-이유-&quot;&gt;&lt;strong&gt;2.2 내가 Git 을 사용하게 된 이유&lt;/strong&gt; &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;내가 안드로이드 앱을 만들었을 때는 게 속되는 버그를 수정하느라 새로운 기능을 작업하는 게 쉬운 일이 아니었다.&lt;br /&gt;
만약 앱을 서비스하고 있는 상황에서 새로운 기능을 만들고 있는 와중에 버그가 발생하였다면&lt;br /&gt;
어떻게 해야 할까?&lt;br /&gt;
당연히 새로운 기능 개발은 중단을 하고 버그를 고쳐 빠르게 업데이트할 수밖에 없다.&lt;br /&gt;
그런데 만약 새로운 기능과 버그 부분의 로직이 겹쳐있어서 새로운 기능 부분을 제거해야 하는 경우는 어떻게 할까.&lt;br /&gt;&lt;br /&gt;
아날로그적인 방법으로 기능 코드를 어딘가에 적어놓고 버그를 고친 후 업데이트하고&lt;br /&gt;
다시 기능 코드를 원래대로 돌리지 않았을까&lt;br /&gt;
아니면 기능을 만들 때는 프로젝트를 복사해두거나..&lt;br /&gt;&lt;br /&gt;
이게 한두 번이면 괜찮은데 이게 반복되어 지쳐서 Git을 사용하게 되었다.&lt;br /&gt;
Git은 이러한 행동을 매우 유연하게 처리할 수 있게 해준다.&lt;br /&gt;
위 같은 경우에 Git을 사용하였다면&lt;br /&gt;
현제 서비스 중인 앱의 상태에서 브랜치 라고 하는&lt;br /&gt;
똑같은 상태의 모습을 가지고 와서 이곳에서 새로운 기능을 개발한다.&lt;br /&gt;
그 후 버그가 발생하였다면 서비스 중인 상태로 이동하여 그곳에서 버그를 수정하고 &lt;br /&gt;
업데이트한 후&lt;br /&gt;&lt;br /&gt;
다시 새로운 기능을 개발하던 브랜치로 돌아와서 마저 개발한 후 완성이 되었다면&lt;br /&gt;
브랜치를 서비스 중인 상태와 결합(Merge) 하여 하나로 합치게 된다.&lt;br /&gt;&lt;br /&gt;
하지만 아무리 누군가가 말해도 직접 사용해보지않으면 그냥 그렇구나 하고 넘어가게된다.&lt;br /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcchXcL%2FbtqPaVwXvUf%2Fv6GSWeeygMA3kCxrkfBqW1%2Fimg.png&quot; /&gt;
    (깃 사용전 , 깃 사용후)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
  &lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtcO8D%2FbtqPiasCeBX%2Fk6rgz15L9Q9VkgqoEbkABK%2Fimg.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;3-cli-gui&quot;&gt;3. CLI GUI&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;아무리 좋다고 해도 어렵게 생각하면 결국 사용하지 않게 된다.
Git을 사용할 때 꼭 CLI로 사용해야 하는 것은 아니다&lt;/p&gt;

&lt;h3 id=&quot;31-소스-트리&quot;&gt;&lt;strong&gt;3.1 소스 트리&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.naver.com/vps32/222019514461&quot;&gt;소스트리 설치 하기&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
소스 트리는 Git에서 자주 사용되는 명령들을 모두 GUI로 구현되어 있기 때문에&lt;br /&gt;
어렵게 명령어를 사용하지 않아도 쉽게 사용할 수 있다.&lt;br /&gt;
나도 Git에 뭔가 알수없는 거부감때문에 사용하지못하고있었는데&lt;br /&gt;
소스트리를 통해 쉽게 사용하면서 Git의 장점을 사용하게되다보니 &lt;br /&gt;
이제는 Git 없이는 살수없는 몸이 되었다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMnnzi%2FbtqPnbqYYl6%2FDG5PRmR4ZFxdaD9TKkaK6k%2Fimg.png&quot; alt=&quot;소스트리이미지&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Git에서 사용되는 용어만 조금 알아보면 쉽게 사용할 수 있으니&lt;br /&gt;
어려워서 사용하기 어려운 사람들은 이러한 도구로 먼저 접해보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-cli&quot;&gt;&lt;strong&gt;3.2 CLI&lt;/strong&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;GUI에서 조금 익숙하게 사용하게 되면 Git Bash를 사용하여 하는 것을 추천한다.&lt;br /&gt;
여기서는 많은 명령어들과 옵션들을 제공하기 때문에 GUI에서는 쉽게 사용할 수 없는 &lt;br /&gt;기능을 들을 사용할 수 있으니&lt;br /&gt;
어차피 결국은 CLI로 하는 것이 바람직하다.&lt;br /&gt;
하지만 Git을 안 쓰는 것보다는 GUI로라도 사용하는 것이 매우 매우 좋다.&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://k4keye.github.io/jekyll-theme-yat/essentialtool/2020/12/30/%EC%A3%BC%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%ED%95%84%EC%88%98%EB%8F%84%EA%B5%AC-Git.html</link>
        <guid isPermaLink="true">https://k4keye.github.io/jekyll-theme-yat/essentialtool/2020/12/30/%EC%A3%BC%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%ED%95%84%EC%88%98%EB%8F%84%EA%B5%AC-Git.html</guid>
        
        
        <category>EssentialTool</category>
        
      </item>
    
  </channel>
</rss>
