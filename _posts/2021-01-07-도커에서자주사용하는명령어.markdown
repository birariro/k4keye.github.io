---
layout: post
title: 도커에서 자주 사용하는 명령어들
author: k4keye
date: 2021-01-03
categories : docker
---
<br/>
<br/>

# 1 서론
___
Docker를 사용해 서비스를 운영해 보면서<br/>
자주 사용했던 명령어들에 해서 기록하려 한다.<br/>
이 글에 있지 않은 수많은 Docker 명령어들이 있지만 나에게는 여기서 나오는 명령어들로 사용하고 있다.<br/>

## **1.1 이전 글**<br/>
[도커 시작하기](https://k4keye.github.io/docker/2020/12/30/%EB%8F%84%EC%BB%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0.html)

<br/><br/>

# 2 Docker 이미지 관련
___
## **2.1 Image 확인** <br/>
로컬에 있는 모든 Image를 확인하기 위해서는
```
docker images
```
위의 명령으로 수행할 수 있다.
<p align="center">
    <img src="https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerimages.png?raw=true"/>
</p>
<br/><br/>

## **2.2 Image 제거**<br/>
다운로드하거나 직접 만든 Image를 제거할 때는
```docker
docker rmi {이미지 명}
```
rmi를 통해 수행할 수 있다.

또한 2.1의 Image 확인과 조합하여<br/>
모든 이미지를 제거할 수도 있다.
```docker
docker rmi `docker images`
```
<br/><br/>

## **2.3 Image 만들기** <br/>
Docker Hub 에 있는 이미지에 조금 더 부가적인 추가를 하여 개인적인 Image를 만들 수 있다.<br/>

Image를 만들기 위해서는 dockerfile라는 파일이 필요하게 되는데<br/>
한 디렉터리 안에는 하나의 dockerfile를 둘 수 있다.<br/>

dockerfile에는 각각의 명령어들이 존재하는데<br/>

▶ FROM : 이미지 생성할 때 사용될 베이스 이미지 지정<br/>
▶ RUN : 이미지를 생성하는 과정에서 실행될 명령어<br/>
▶ WORKDIR : 명령을 실행할 위치<br/>
▶ ENTRYPOINT : 컨테이너 실행 시 수행할 명령어<br/>
▶ ENV : 환경 변수 설정<br/>
▶ COPY : 로컬에 있는 파일을 컨테이너로 복사.<br/>
<br/>
위의 명령어들을 조합해서 최대한 dockerfile를 작성해 볼 것이다.<br/>

```docker
FROM centos:7

RUN yum -y update
RUN yum -y install git
RUN yum -y install net-tools
RUN git clone "https://k4keye.github.com/project.git"
COPY test.sh /home

ENV TZ=Asia/Seoul
WORKDIR /home/

WORKDIR /home/project/Bash/
RUN chmod 700 start.sh

ENTRYPOINT ["/bin/bash","/home/project/Bash/start.sh"]

```
<br/>
해당 image는 centos7을 기준으로 간다.<br/>
이미지를 생성할 때 해당 이미지에<br/>
update , git, net-toole 을 install 하고<br/>

git 프로젝트를 clone 한다.<br/>

로컬에 있는 test.sh를 컨테이너에 /home 경로로 복사한다.<br/>

timezone 을 서울로 한다.<br/>

clone를 받은 프로젝트로 경로를 이동하여 실행 권한을 준다.<br/>

컨테이너가 실행될 때 해당 프로젝트 안에 있는 shell 을 실행시킨다.<br/><br/>

## **2.4dockerfile를 image로 build 하기** <br/>
위에서 만든 dockerfile를 사용하기 위해서는 image로 만들어야 한다.<br/>
해당 파일이 있는 경로에서<br/>

```
docker build -t {이미지 명} .
```
build 명령어를 통해 수행할 수 있다.
<br/><br/> 
# 3 컨테이너 관련
___

## **3.1 컨테이너 생성** <br/><br/>
이전 글에서 보았듯이 Docker Hub에 있는 Image를 사용하거나 이미 로컬에 있는 <br/>Image를 사용하여 컨테이너를 생성하기 위해서는<br/>
```
docker run {이미지 명}
```
위와 같이 RUN 명령어를 통해 수행할 수 있었다.<br/><br/>

이 run 을 사용할때도 수많은 옵션을 통해 더 실용성 있는 컨테이너로 태어날 수 있다.<br/><br/>

이중 몇 가지 사용하는 것만 설명하면<br/>

-v 볼륨을 연결한다.<br/>
-p 포트를 연결한다.<br/>
--name  컨테이너의 이름 지정<br/>
--restart=always : 도커가 실행될때 해당 컨테이너 자동 실행<br/><br/>

위의 명령어들을 모두 사용하여 run을 한다고 하면<br/>
```docker
dcker run --restart=always --name testcont -v $(pwd):/home/developer -p 8080:8080 {이미지명}
```

해당 컨테이너는 도커가 실행되면 자동으로 실행된다.<br/>
컨테이너의 명은 testcont이다.<br/><br/>

로컬의 현재 실행 경로와 컨테이너의 /home/developer 을 연결한다.<br/>
로컬의 8080포트를 컨테이너의 8080 와 연결한다.<br/><br/>

​
위의 명령어 중 가장 감사하게 사용하는 기능이<br/>
--restart=always 이 부분인데<br/><br/>

실제 컨테이너에는 서비스가 동작 중이고<br/>
서버가 새로 올라가거나(오토스케일 등) 재부팅이 될 경우 컨테이너도 같이 올라와야 한다.<br/>

docker 자체를 서비스에 등록만 시켜두면 서버가 부팅에 대한 이벤트를 발생할 때마다<br/>

서비스가 자동으로 올라오니 아주 유용하게 사용하고 있다.<br/><br/>

## **3.2 컨테이너 보기** <br/><br/>
로컬에 있는 모든 컨테이너를 확인하기 위해서는<br/>
```
docker ps 
```
ps 명령어로 확인할 수 있다.
<p align="center">
    <img src="https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerps.png?raw=true"/>
</p>
<br/><br/>

## **3.3 컨테이너 삭제** <br/>
사용하지 않는 컨테이너를 삭제할 때는<br/>
```
docker rm {컨테이너 명}
```
rm 을 통해 삭제할 수 있다.<br/>

또한 3.2 와 조합하여<br/>
```
docker rm `docker ps`
```
모든 컨테이너를 삭제할 수 있다.<br/><br/>

## **3.3 컨테이너 시작 , 종료** <br/><br/>
ps로 확인한 컨테이너 중 특정 컨테이너를 시작, 종료하고 싶다면 <br/>
```
docker start {컨테이너명}
docker stop {컨테이너명}
```
start , stop로 수행할 수 있다. <br/><br/>

## **3.4 컨테이너 접속**<br/><br/>
```
docker exec -it {컨테이너명} bash
```
실행 중인 컨테이너에 접속하려 할 때는 exec를 통해 접속할 수 있다.
<br/><br/>

## **3.6 컨테이너 모니터링**<br/><br/>
로컬에서 동작 중인 컨테이너의 CPU, 메모리 상태 등을 확인할 수 있다.
```
docker stats
docker stats {컨테이너 명}
```
<p align="center">
    <img src="https://github.com/k4keye/k4keye.github.io/blob/master/images/Docker/dockerstats.png?raw=true"/>
</p>
<br/><br/>

## **3.6 컨테이너 로그 확인**<br/><br/>
로컬에서 동작 중인 컨테이너의 로그를 볼 수 있다.
```
docker logs {컨테이너 명}
```

<br/>
<br/>
<br/>
<br/>
<br/>